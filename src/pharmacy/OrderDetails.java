package pharmacy;

import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

// @author thima

public class OrderDetails extends javax.swing.JFrame {
// Creates new form OrderDetails
     
    public OrderDetails() 
    {
        initComponents();
        getMedicineID();
        getCustomerID();
        getOrderID();
        getOrderDetails();
        date.setDate(Date.from(Instant.now()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        ReOrderBtn = new javax.swing.JButton();
        BackBtn2 = new javax.swing.JButton();
        OrderStatusBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        ExitBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        updateBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        AddToCartBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        SearchByTheOrderID = new javax.swing.JTextField();
        ClearBtn = new javax.swing.JButton();
        LogoutBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        net_Amt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        cust_id = new javax.swing.JComboBox<>();
        medicine_ID = new javax.swing.JComboBox<>();
        medID1 = new javax.swing.JLabel();
        med_Name = new javax.swing.JTextField();
        medID4 = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        medID9 = new javax.swing.JLabel();
        unit_Price = new javax.swing.JTextField();
        medID10 = new javax.swing.JLabel();
        tot = new javax.swing.JTextField();
        AddBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Cart = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setSize(new java.awt.Dimension(1200, 800));

        jPanel1.setBackground(new java.awt.Color(0, 153, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(1479, 800));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("MediCare Pharmaceuticals");

        jLabel2.setIcon(new javax.swing.ImageIcon("D:\\Pharmacy Management System\\Pharmacy\\Images\\Orders.png")); // NOI18N

        backBtn.setBackground(new java.awt.Color(51, 204, 0));
        backBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        ReOrderBtn.setBackground(new java.awt.Color(102, 204, 0));
        ReOrderBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ReOrderBtn.setText("Re Order");
        ReOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReOrderBtnActionPerformed(evt);
            }
        });

        BackBtn2.setBackground(new java.awt.Color(102, 204, 0));
        BackBtn2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BackBtn2.setText("Demo");
        BackBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtn2ActionPerformed(evt);
            }
        });

        OrderStatusBtn.setBackground(new java.awt.Color(102, 204, 0));
        OrderStatusBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        OrderStatusBtn.setText("Order Status");
        OrderStatusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderStatusBtnActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1250, 800));

        ExitBtn.setBackground(new java.awt.Color(0, 153, 102));
        ExitBtn.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        ExitBtn.setText("x");
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 102));
        jLabel3.setText(" Order Management");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Order Date:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Net Amount");

        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Customer ID", "Customer Name", "Net Amount", "Order Date", "Order Status"
            }
        ));
        ordersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ordersTable);

        updateBtn.setBackground(new java.awt.Color(102, 204, 0));
        updateBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setBackground(new java.awt.Color(102, 204, 0));
        DeleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        AddToCartBtn.setBackground(new java.awt.Color(102, 204, 0));
        AddToCartBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddToCartBtn.setText("Add Medicine To Cart");
        AddToCartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToCartBtnActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Order List");

        searchBtn.setBackground(new java.awt.Color(102, 204, 0));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        SearchByTheOrderID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SearchByTheOrderIDKeyPressed(evt);
            }
        });

        ClearBtn.setBackground(new java.awt.Color(102, 204, 0));
        ClearBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        LogoutBtn.setBackground(new java.awt.Color(51, 204, 0));
        LogoutBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LogoutBtn.setText("Logout");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Customer ID:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Medicine ID:");

        net_Amt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                net_AmtActionPerformed(evt);
            }
        });
        net_Amt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                net_AmtKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                net_AmtKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Order ID:");

        id.setEditable(false);
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        cust_id.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        cust_id.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cust_idItemStateChanged(evt);
            }
        });
        cust_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cust_idActionPerformed(evt);
            }
        });

        medicine_ID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0" }));
        medicine_ID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                medicine_IDItemStateChanged(evt);
            }
        });

        medID1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID1.setText("Medicine Name");

        medID4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID4.setText("Quantity");

        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });

        medID9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID9.setText("Unit Price");

        unit_Price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unit_PriceActionPerformed(evt);
            }
        });

        medID10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID10.setText("Total Amount");

        tot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                totMouseClicked(evt);
            }
        });
        tot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totActionPerformed(evt);
            }
        });

        AddBtn.setBackground(new java.awt.Color(102, 204, 0));
        AddBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddBtn.setText("Add");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Customer Name");
        jLabel12.setToolTipText("");

        customerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerNameKeyReleased(evt);
            }
        });

        Cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine ID", "Medicine Name", "Quantity", "Unit Price", "Total Amount"
            }
        ));
        Cart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Cart);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel8)
                    .addComponent(jLabel12)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cust_id, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(net_Amt, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medID9)
                            .addComponent(medID1)
                            .addComponent(medID10)
                            .addComponent(medID4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AddToCartBtn))
                    .addComponent(med_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medicine_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unit_Price, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tot, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(263, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(206, 206, 206)
                .addComponent(LogoutBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ExitBtn)
                .addGap(203, 203, 203))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1007, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(143, 143, 143)
                                .addComponent(updateBtn)
                                .addGap(149, 149, 149)
                                .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(160, 160, 160)
                                .addComponent(ClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1007, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(SearchByTheOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBtn))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(485, 485, 485)
                        .addComponent(jLabel9)))
                .addContainerGap(224, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(LogoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel11))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10))
                            .addComponent(medicine_ID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cust_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(medID1)
                    .addComponent(med_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medID4)
                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddToCartBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(medID9)
                        .addComponent(net_Amt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(unit_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(medID10)
                        .addComponent(tot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(52, 52, 52)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtn)
                    .addComponent(updateBtn)
                    .addComponent(DeleteBtn)
                    .addComponent(ClearBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchByTheOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        jScrollPane3.setViewportView(jPanel2);

        jScrollPane4.setViewportView(jScrollPane3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BackBtn2)
                            .addComponent(backBtn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OrderStatusBtn)
                            .addComponent(ReOrderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1096, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backBtn)
                .addGap(18, 18, 18)
                .addComponent(BackBtn2)
                .addGap(75, 75, 75)
                .addComponent(ReOrderBtn)
                .addGap(18, 18, 18)
                .addComponent(OrderStatusBtn)
                .addContainerGap(702, Short.MAX_VALUE))
            .addComponent(jScrollPane4)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1348, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1184, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        //Exit Button
        System.exit(0);
    }//GEN-LAST:event_ExitBtnActionPerformed

    private void loadCartData() 
    {
        ResultSet rst;

        try {
            String sql = "SELECT med_ID, med_name, qty, unit_price FROM medicine";

            // Establish database connection and prepare the statement
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
            java.sql.PreparedStatement pst = st.getConnection().prepareStatement(sql);

            rst = pst.executeQuery();

            DefaultTableModel model = (DefaultTableModel) Cart.getModel();
            model.setRowCount(0); // clear the table

            while (rst.next()) {
                int medID = rst.getInt("med_ID");
                String medName = rst.getString("med_name");
                int qty = rst.getInt("qty");
                int uPrice = rst.getInt("unit_price");
                int tPrice = qty * uPrice;

                model.addRow(new Object[]{medID, medName, qty, uPrice, tPrice});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        for (int row = 0; row < Cart.getRowCount(); row++) {
            int rowHeight = Cart.getRowHeight();

            for (int column = 0; column < Cart.getColumnCount(); column++) {
                Component comp = Cart.prepareRenderer(Cart.getCellRenderer(row, column), row, column);
                rowHeight = Math.max(rowHeight, comp.getPreferredSize().height + 12);
            }
            Cart.setRowHeight(row, rowHeight);
        }
    }

    
    // get customer ID
    public void getCustomerID() 
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rst = st.executeQuery("SELECT cust_ID FROM doctor");

            while (rst.next()) 
            {
                int custID = rst.getInt("cust_ID");
                cust_id.addItem(String.valueOf(custID));
            }

        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // clear all feilds 
    public void clear() 
    {
        med_Name.setText("");
        quantity.setText("");
        unit_Price.setText("");
        tot.setText("");
    }
    
    // get order ID
    public void getOrderID() 
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rst = st.executeQuery("SELECT MAX(OID) FROM ordersnew");

            while (rst.next()) 
            {
                int maxOID = rst.getInt(1); // Get the first column (column index 1) from the result set
                id.setText(String.valueOf(maxOID + 1)); // Set the text of id with the maxOID
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void getOrderDetails() 
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            String query = "SELECT onew.OID,onew.CID,doc.f_name AS CustomerName,onew.date,onew.netamount,onew.order_status FROM ordersnew onew INNER JOIN doctor doc ON onew.CID = doc.cust_id;";
            ResultSet rst = st.executeQuery(query);
            System.out.println(query);
            DefaultTableModel tblmodel = (DefaultTableModel) ordersTable.getModel();

            tblmodel.setRowCount(0);
            
            while (rst.next()) 
            {
                String OID = String.valueOf(rst.getString("OID"));
                String CID = String.valueOf(rst.getString("CID"));
                String MID = String.valueOf(rst.getString("CustomerName"));
                String Net = String.valueOf(rst.getString("netamount"));
                String Date = String.valueOf(rst.getString("date"));
                String status = String.valueOf(rst.getString("order_status"));

                String tbData[] = {OID, CID, MID, Net, Date, status};

                tblmodel.addRow(tbData);
            }
            
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    
    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        //Logout Button 
        this.dispose();
        Loginform obj = new Loginform();
        obj.show();
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // Back Button -> navigates to the Dashboard
        this.dispose();
        Dashboard obj = new Dashboard();
        obj.show();
    }//GEN-LAST:event_backBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        String medID = String.valueOf(medicine_ID.getSelectedItem());
        String medName = med_Name.getText();
        int qty = Integer.parseInt(quantity.getText());
        int unitPrice = Integer.parseInt(unit_Price.getText());
        int total = Integer.parseInt(tot.getText());

        String qtyString = String.valueOf(qty);
        String unitPriceString = String.valueOf(unitPrice);
        String totalString = String.valueOf(total);

        String data[] = {medID, medName, qtyString, unitPriceString, totalString};

        DefaultTableModel tblModel = (DefaultTableModel) Cart.getModel();
        int selectedRow = Cart.getSelectedRow();
        tblModel.removeRow(selectedRow);
        tblModel.addRow(data);
    }//GEN-LAST:event_updateBtnActionPerformed

    //Refresh the ordersTable after updating/deleting the selected order details
    private void refreshOrdersTable() 
    {
        try 
        {
            // Fetch updated data from the Database
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery(" SELECT * FROM orders ");

            // Create a new DefaultTableModel with updated data
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Order ID");
            model.addColumn("Customer ID");
            model.addColumn("Medicine ID");
            model.addColumn("Quantity");
            model.addColumn("Total Amount(LKR)");
            model.addColumn("Order Date");

            while (rs.next()) 
            {
                Object[] row
                        = {
                            rs.getInt("OrderID"),
                            rs.getInt("cust_ID"),
                            rs.getInt("med_ID"),
                            rs.getInt("qty"),
                            rs.getDouble("totalAmt"),
                            rs.getString("orderDate")
                        };
                model.addRow(row);
            }

            // Set the updated model to the ordersTable
            ordersTable.setModel(model);
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error occurred while refreshing Table: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
        clear();
        nettotal = 0;
        net_Amt.setText("");
        customerName.setText("");
    }//GEN-LAST:event_ClearBtnActionPerformed

    
    private void AddToCartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToCartBtnActionPerformed
        //Add Medicine To The Cart Button
        isupdate = false;
        String medID = String.valueOf(medicine_ID.getSelectedItem());
        String medName = med_Name.getText();
        int qty = Integer.parseInt(quantity.getText());
        int unitPrice = Integer.parseInt(unit_Price.getText());
        int total = Integer.parseInt(tot.getText());

        String qtyString = String.valueOf(qty);
        String unitPriceString = String.valueOf(unitPrice);
        String totalString = String.valueOf(total);

        String data[] = {medID, medName, qtyString, unitPriceString, totalString};

        DefaultTableModel tblModel = (DefaultTableModel) Cart.getModel();
        tblModel.addRow(data);

        clear();
    }//GEN-LAST:event_AddToCartBtnActionPerformed

    private void calculateTotalAmount() 
    {
        try 
        {
            int quantity = Integer.parseInt(net_Amt.getText());
            String selectedItem = (String) cust_id.getSelectedItem();

            // Check whether the selectedItem is null
            if (selectedItem != null) 
            {
                String parts[] = selectedItem.split(" - ");
                int medID = Integer.parseInt(parts[1]);

                // Fetch the unit price from the database using medID
                double unitPrice = getUnitPrice(medID);

                double totalAmount = quantity * unitPrice;
                tot.setText(String.valueOf(totalAmount));
            } 
            else
            {
                tot.setText("0");
            }
        } 
        catch (NumberFormatException e) 
        {
            tot.setText("0");
        }
    }
    
    private double getUnitPrice(int medID) 
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT unit_price FROM medicine WHERE med_ID = " + medID);

            if (rs.next()) 
            {
                return rs.getDouble("unit_price");
            }
        } 
        catch (SQLException ex) 
        {
            ex.printStackTrace();
        }
        return 0;
    }
    
    private void net_AmtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_net_AmtKeyPressed
        //Ensures that the user enters only the numerical values for quantity
        char c = evt.getKeyChar();
        //Validating the user inputs for the quantity
        if (Character.isLetter(c)) 
        {
            net_Amt.setEditable(false);
            JOptionPane.showMessageDialog(null, "Enter Numerical Values for the Quantity", "Error", JOptionPane.ERROR_MESSAGE);
            net_Amt.setEditable(true);

        }
    }//GEN-LAST:event_net_AmtKeyPressed

    private void ordersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersTableMouseClicked
        //Get the index of the selected row
        int selectedRow = ordersTable.getSelectedRow();
        
        //Establish the table model that represents the structure & data of the table
        TableModel model = ordersTable.getModel(); 
        
        //Validationa to ensure that User interacts with the selected row data
        //Set the Order ID,Medicine ID,Customer ID,Quantity,Total Amount & Order Date text fields to the value from the selected row
       
        //Retrieve the data from the First Column(index 0)of the selected row & store it in OrderID
        id.setText(model.getValueAt(selectedRow, 0).toString());  
        
        //Set the Date Format
        SimpleDateFormat sfd = new SimpleDateFormat("yyyy-MM-dd");
        String orderDate = (String) model.getValueAt(selectedRow, 5);
        
        try 
        {
          //Handle the parsing of the Order Date
          Date orderingDate = sfd.parse(orderDate); 
          date.setDate(orderingDate); 
        } 
        catch (ParseException e) 
        {
            // Handle the parsing exception,by displaying an error message.
            e.printStackTrace();
        }
    }//GEN-LAST:event_ordersTableMouseClicked

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
       
    }//GEN-LAST:event_searchBtnActionPerformed

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        //Delete Button
        DefaultTableModel tblmodel = (DefaultTableModel) Cart.getModel();

        if (Cart.getSelectedRowCount() > 0) 
        {
            int selectedRow = Cart.getSelectedRow();
            String total = (String) tblmodel.getValueAt(selectedRow, 4); // assuming the total amount is in the 6th column (index 5)

            int totalAmount = Integer.parseInt(total);

            tblmodel.removeRow(selectedRow);

            if (Cart.getRowCount() == 0) 
            {
                net_Amt.setText("");
            } 
            else 
            {
                int net = nettotal - totalAmount;
                net_Amt.setText(String.valueOf(net));
            }
            System.out.println(totalAmount);
        } 
        else if (Cart.getRowCount() == 0) 
        {
            JOptionPane.showMessageDialog(null, "Error: No rows selected.");
        } 
        else 
        {
            JOptionPane.showMessageDialog(null, "Error: Please select a row to delete.");
        }

    }//GEN-LAST:event_DeleteBtnActionPerformed

     // GET MEDICINE ID FROM DATABSE
    public int medicineID;
    public String medicineName;

    // get medicine ID
    public void getMedicineID() 
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rst = st.executeQuery("SELECT med_ID FROM medicine");

            while (rst.next()) 
            {
                int medID = rst.getInt("med_ID");
                medicine_ID.addItem(String.valueOf(medID));
            }

        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getMedicineName()
    {
      try 
      {
            // Assuming pharmacy.DBconnection.createDBconnection() returns a valid Connection object
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
            String query = "SELECT med_name FROM medicine WHERE med_id = " + medicineID;
            System.out.println(query);
            ResultSet resultSet = st.executeQuery(query);

            while (resultSet.next()) 
            {
                medicineName = resultSet.getString("med_name");
                med_Name.setText(medicineName);
            }

            // Close the resources after use
        } 
      catch (SQLException ex) 
      {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public int Quantity, unit_price, total;

    private void getTotal() 
    {
        Quantity = Integer.parseInt(quantity.getText());
        unit_price = Integer.parseInt(unit_Price.getText());

        total = Quantity * unit_price;
        tot.setText(String.valueOf(total));
    }
    
    private void SearchByTheOrderIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchByTheOrderIDKeyPressed
        DefaultTableModel obj = (DefaultTableModel) ordersTable.getModel();
        TableRowSorter<DefaultTableModel> obj1 = new TableRowSorter<>(obj);
        ordersTable.setRowSorter(obj1);
        obj1.setRowFilter(RowFilter.regexFilter(SearchByTheOrderID.getText()));
    }//GEN-LAST:event_SearchByTheOrderIDKeyPressed

    private void cust_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cust_idActionPerformed
        // Extract med_ID from the selected combo box item
        String selectedCustomerID = (String) cust_id.getSelectedItem();

        // Check if the selectedCustomerID is not null before splitting
        if (selectedCustomerID != null) 
        {
            String medID = selectedCustomerID.split(" - ")[1];
            // Set med_ID to the respective JTextField
        }
    }//GEN-LAST:event_cust_idActionPerformed

    private void net_AmtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_net_AmtKeyReleased
        calculateTotalAmount();
    }//GEN-LAST:event_net_AmtKeyReleased

    private void ReOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReOrderBtnActionPerformed
        // Re Order Page Button
        ReOrdering obj = new ReOrdering();
        obj.show();
        // Close the Order Management Page
        this.dispose();
    }//GEN-LAST:event_ReOrderBtnActionPerformed

    private void unit_PriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unit_PriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unit_PriceActionPerformed

    private void totActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        try 
        {
           // int cid = cust_id.getSelectedIndex();
            String id = cust_id.getSelectedItem().toString();
            int cid = Integer.parseInt(id);
            int netamount = Integer.parseInt(net_Amt.getText());
            SimpleDateFormat sfd = new SimpleDateFormat("yyyy-MM-dd");
            String orderDate = sfd.format(date.getDate());

            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();

            int count = st.executeUpdate("INSERT INTO ordersnew (CID, date, netamount) VALUES ('" + cid + "', '" + orderDate + "', '" + netamount + "')");

            if (count > 0) 
            {
                JOptionPane.showMessageDialog(null, "New Order's Details Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        try 
        {
            int oid = Integer.parseInt(id.getText());
            Connection conn = pharmacy.DBconnection.createDBconnection(); // Establish database connection
            String insertQuery = "INSERT INTO orderdetails (OID, MID, Mname, qty, unitprice, total) VALUES ('" + oid + "', ?, ?, ?, ?, ?)";

            PreparedStatement pstmt = conn.prepareStatement(insertQuery);

            for (int row = 0; row < Cart.getRowCount(); row++) 
            {

                String MID = Cart.getValueAt(row, 0).toString(); // Assuming column index 1 for MID
                String Mname = Cart.getValueAt(row, 1).toString(); // Assuming column index 2 for Mname
                String qty = Cart.getValueAt(row, 2).toString(); // Assuming column index 3 for qty
                String unitPrice = Cart.getValueAt(row, 3).toString(); // Assuming column index 4 for unitprice
                String total = Cart.getValueAt(row, 4).toString(); // Assuming column index 5 for total

                //  pstmt.setString(1, OID);
                pstmt.setString(1, MID);
                pstmt.setString(2, Mname);
                pstmt.setString(3, qty);
                pstmt.setString(4, unitPrice);
                pstmt.setString(5, total);

                pstmt.executeUpdate();
            }

            pstmt.close();
            conn.close();
            System.out.println(insertQuery);
            JOptionPane.showMessageDialog(null, "Data inserted successfully!");
        } 
        catch (SQLException e) 
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error inserting data into database: " + e.getMessage());
        }
        getOrderDetails();
    }//GEN-LAST:event_AddBtnActionPerformed

    private void customerNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNameKeyPressed

    private void customerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerNameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_customerNameKeyReleased

    private void BackBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtn2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BackBtn2ActionPerformed

    private void OrderStatusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderStatusBtnActionPerformed
        // Order Status Page Button
        OrderStatus obj = new OrderStatus();
        obj.show();
        // Close the Order Management Page
        this.dispose();
    }//GEN-LAST:event_OrderStatusBtnActionPerformed

    private void medicine_IDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_medicine_IDItemStateChanged
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();

            int id = medicine_ID.getSelectedIndex();
            ResultSet rst = st.executeQuery("SELECT med_name,unit_price FROM medicine where med_ID = '" + id + "'");

            while (rst.next()) 
            {
                String medName = rst.getString("med_name");
                String medUnitPrice = rst.getString("unit_price");
                med_Name.setText(medName);
                unit_Price.setText(medUnitPrice);
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_medicine_IDItemStateChanged

    private void totMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_totMouseClicked
        getTotal();
        net_Amt.setText("2000");
    }//GEN-LAST:event_totMouseClicked

    private void cust_idItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cust_idItemStateChanged
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();

            //int id = cust_id.getSelectedItem().;
            String cid = cust_id.getSelectedItem().toString();
            System.out.println(cid);
            int id = Integer.parseInt(cid);
            ResultSet rst = st.executeQuery("SELECT f_name FROM doctor where cust_ID = '" + id + "'");

            while (rst.next()) 
            {
                String custname = rst.getString("f_name");
                customerName.setText(custname);
            }
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(OrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch(Exception e){
        }
    }//GEN-LAST:event_cust_idItemStateChanged

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
      //  int total = 0;
        if (!isupdate) 
        {
            int qty = Integer.parseInt(quantity.getText());
            int unitPrice = Integer.parseInt(unit_Price.getText());

            total = unitPrice * qty;
            nettotal = nettotal + total;

            tot.setText(String.valueOf(total));
            net_Amt.setText(String.valueOf(nettotal));
        }
        else 
        {
            int qty = Integer.parseInt(quantity.getText());
            int unitPrice = Integer.parseInt(unit_Price.getText());

            total = unitPrice * qty;

            tot.setText(String.valueOf(total));

            total = unitPrice * qty;

            if (totalAmount > total) 
            {

                int x = totalAmount - total;

                net_Amt.setText(String.valueOf(nettotal - x));
            }
        }
    }//GEN-LAST:event_quantityActionPerformed

    private void CartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartMouseClicked
        int i = Cart.getSelectedRow();
        isupdate = true;
        TableModel model = Cart.getModel();

        // cmb_medId.setSelectedIndex((int) model.getValueAt(i, 0));
        med_Name.setText((String) model.getValueAt(i, 1));
        quantity.setText((String) model.getValueAt(i, 2));
        unit_Price.setText((String) model.getValueAt(i, 3));

        String totalAmountStr = (String) model.getValueAt(i, 4);
        totalAmount = Integer.parseInt(totalAmountStr);
    }//GEN-LAST:event_CartMouseClicked

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void net_AmtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_net_AmtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_net_AmtActionPerformed
    
    
    int totalAmount;
    int nettotal = 0;
    boolean isupdate = false;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton AddToCartBtn;
    private javax.swing.JButton BackBtn2;
    private javax.swing.JTable Cart;
    private javax.swing.JButton ClearBtn;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JButton ExitBtn;
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JButton OrderStatusBtn;
    private javax.swing.JButton ReOrderBtn;
    private javax.swing.JTextField SearchByTheOrderID;
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox<String> cust_id;
    private javax.swing.JTextField customerName;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel medID1;
    private javax.swing.JLabel medID10;
    private javax.swing.JLabel medID4;
    private javax.swing.JLabel medID9;
    private javax.swing.JTextField med_Name;
    private javax.swing.JComboBox<String> medicine_ID;
    private javax.swing.JTextField net_Amt;
    private javax.swing.JTable ordersTable;
    private javax.swing.JTextField quantity;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField tot;
    private javax.swing.JTextField unit_Price;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
