package pharmacy;
// @author thath

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
 
public class SupplierDetails extends javax.swing.JFrame 
{
// Creates new form SupplierDetails
     
    public SupplierDetails() 
    {
        initComponents();
        refreshSuppliersTable();
        
        //The method to populate the med_id combo box
        getMedicineIDs();
        
        // Setting today's date as the only selectable date in the JDateChooser
        Date today = new Date();
        Date.setDate(today);
        Date.setMinSelectableDate(today);
        Date.setMaxSelectableDate(today);
        
        // Adding a focus listener to contactPerson field
        contactPerson.addFocusListener(new FocusAdapter() 
        {
            @Override
            public void focusLost(FocusEvent e) 
            {
                validateContactNumber();
            }
        });
        
        med_id.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                int selectedMedID = Integer.parseInt(med_id.getSelectedItem().toString());
                String medicineName = getMedicineNameByMedID(selectedMedID);
                med_Name.setText(medicineName);
            }
        });
        
        //ActionListener to the Demo button
        demo_btn.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                fillDemoData(); 
            }
    });
        
        id.setText("Will Be Added Automatically");
        company.setText("");
        med_Name.setText("");
        email.setText("@gmail.com");
        contactNo.setText("");
        contactPerson.setText("");
        Date.setDate(new java.util.Date());
    }

    // Validate contact number and display error if not 10 digits
    private void validateContactNumber() 
    {
        String contactNumber = contactNo.getText().trim();
        if (contactNumber.length() != 10) 
        {
            JOptionPane.showMessageDialog(null, "Enter exactly 10 numerical values for the contact number",
                    "Error", JOptionPane.ERROR_MESSAGE);
            contactNo.requestFocus(); // Set focus back to contactNo field
        }
    }
    
    private void getMedicineIDs() 
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rst = st.executeQuery("SELECT med_ID FROM medicine");

            // Clear existing items in the combo box
            med_id.removeAllItems();

            // Populate combo box with customer IDs
            while (rst.next()) 
            {
                // Store med_IDs in the combo box
                String item = String.valueOf(rst.getInt("med_ID"));
                med_id.addItem(item);
            }

            // Close resources
            rst.close();
            st.close();
            DBconnection.createDBconnection().close();
        } 
        catch (SQLException ex) 
        {
            // Handle exceptions
            JOptionPane.showMessageDialog(null, "Error fetching Customer IDs: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //Method to fill the text fields with pre-assigned data
    private void fillDemoData() 
    {
        company.setText("Safe guard");
        email.setText("safeguard@gmail.com");
        contactNo.setText("0112345678");
        contactPerson.setText("Ms Deshani");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        demo_btn = new javax.swing.JButton();
        medicine_inventory_page_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        exitBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        company = new javax.swing.JTextField();
        contactNo = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        suppliersTable = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        searchTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        med_id = new javax.swing.JComboBox<>();
        contactPerson = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        med_Name = new javax.swing.JTextField();
        Date = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 153, 102));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("MediCare Pharmaceuticals");

        jLabel2.setIcon(new javax.swing.ImageIcon("D:\\Pharmacy Management System\\Pharmacy\\Images\\supplier.png")); // NOI18N

        backBtn.setBackground(new java.awt.Color(102, 204, 0));
        backBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        demo_btn.setBackground(new java.awt.Color(102, 204, 0));
        demo_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        demo_btn.setText("Demo");
        demo_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demo_btnActionPerformed(evt);
            }
        });

        medicine_inventory_page_btn.setBackground(new java.awt.Color(102, 204, 0));
        medicine_inventory_page_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medicine_inventory_page_btn.setText("Medicine Inventory");
        medicine_inventory_page_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicine_inventory_page_btnActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        exitBtn.setBackground(new java.awt.Color(0, 153, 102));
        exitBtn.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        exitBtn.setText("x");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 102));
        jLabel3.setText("Supplier Management");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Medicine ID:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Supplier ID:");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Company Name:");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Contact Number:");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Date:");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Email:");

        id.setEditable(false);

        contactNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactNoActionPerformed(evt);
            }
        });
        contactNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                contactNoKeyPressed(evt);
            }
        });

        suppliersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Supplier ID", "Company Name", "Medicine ID", "Medicine Name", "Email", "Contact No:", "Contact Person", "Date"
            }
        ));
        suppliersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                suppliersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(suppliersTable);

        addBtn.setBackground(new java.awt.Color(102, 204, 0));
        addBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(102, 204, 0));
        updateBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(102, 204, 0));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jLabel16.setText("Supplier List");

        searchBtn.setBackground(new java.awt.Color(102, 204, 0));
        searchBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(102, 204, 0));
        clearBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        logoutBtn.setBackground(new java.awt.Color(102, 204, 0));
        logoutBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        med_id.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        med_id.setSelectedIndex(-1);

        contactPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactPersonActionPerformed(evt);
            }
        });
        contactPerson.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                contactPersonKeyPressed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Contact Person:");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Medicine Name:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(461, 1007, Short.MAX_VALUE)
                        .addComponent(logoutBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exitBtn)
                        .addGap(51, 51, 51))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel17))
                                .addGap(72, 72, 72)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(med_id, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(company, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                                .addComponent(id, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE))
                                            .addComponent(med_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(44, 44, 44)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addGap(18, 18, 18)
                                                .addComponent(contactNo, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel15)
                                                        .addComponent(jLabel13)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(contactPerson, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                                    .addComponent(Date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(19, 19, 19))))))
                                    .addComponent(jLabel3)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(433, 433, 433)
                                .addComponent(updateBtn))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(521, 521, 521)
                                .addComponent(jLabel16))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(logoutBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14)
                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(company, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(contactNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(med_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(contactPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17)
                        .addComponent(med_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addComponent(Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(updateBtn)
                    .addComponent(deleteBtn)
                    .addComponent(clearBtn))
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(2, 2, 2)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(demo_btn)
                            .addComponent(backBtn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(medicine_inventory_page_btn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1199, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(backBtn)
                .addGap(18, 18, 18)
                .addComponent(demo_btn)
                .addGap(47, 47, 47)
                .addComponent(medicine_inventory_page_btn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        //Exit Button
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        //Logout Button 
        this.dispose();
        Loginform obj = new Loginform();
        obj.show();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // Back Button -> navigates to the Dashboard
        this.dispose();
        Dashboard obj = new Dashboard();
        obj.show();
    }//GEN-LAST:event_backBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        //Update Button
        try 
        {
            String companyName, medicineName, emailAddress, contact_Person, contactNumber;
            String medicineID; // Changing Int to String for parsing
            int supplierID;

            companyName = company.getText();
            medicineName = med_Name.getText();
            emailAddress = email.getText();
            contact_Person = contactPerson.getText();
            medicineID = (String) med_id.getSelectedItem();
            contactNumber = contactNo.getText();
            supplierID = Integer.parseInt(id.getText()); 
            
            // Validating empty fields
            if (companyName.isEmpty() || emailAddress.isEmpty() || contactNumber.isEmpty() || contact_Person.isEmpty()) 
            {
                JOptionPane.showMessageDialog(null, "Please fill in all the required fields", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Validating contact number
            if (contactNumber.length() != 10) 
            {
                JOptionPane.showMessageDialog(null, "Enter exactly 10 numerical values for the contact number", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate email address
            if (!emailAddress.endsWith("@gmail.com") || emailAddress.equals("@gmail.com")) 
            {
                JOptionPane.showMessageDialog(null, "Enter a valid Gmail address", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Check for duplicate data
            if (RowisDuplicated(companyName, emailAddress, supplierID)) 
            {
                JOptionPane.showMessageDialog(null, "Error: Please check the company details you're trying to update; There's another company in the system database with the same details", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Validating and formatting the date
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String dateAdded = sdf.format(Date.getDate());

            // Create the SQL query for updating the supplier record
            String query = "UPDATE supplier SET med_ID = ?, medName = ?, company = ?, "
                         + "contact_person = ?, email = ?, phone_no = ?, date = ? "
                         + "WHERE sup_ID = ?";

            // Establish database connection and prepare the statement
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
            // Use PreparedStatement to avoid SQL injection
            java.sql.PreparedStatement prepSt = st.getConnection().prepareStatement(query);

            prepSt.setInt(1, Integer.parseInt(medicineID));
            prepSt.setString(2, medicineName);
            prepSt.setString(3, companyName);
            prepSt.setString(4, contact_Person);
            prepSt.setString(5, emailAddress);
            prepSt.setString(6, contactNumber);
            prepSt.setDate(7, java.sql.Date.valueOf(dateAdded));
            prepSt.setInt(8, supplierID);

            // Execute the update statement
            int rowCount = prepSt.executeUpdate();

            // Check if update was successful
            if (rowCount > 0) 
            {
                JOptionPane.showMessageDialog(null, "Supplier's Details Updated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                refreshSuppliersTable(); // Refresh the table after successful update
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Failed to update Supplier's Details", "Error", JOptionPane.ERROR_MESSAGE);
            }
        
    } 
    catch (NumberFormatException ex) 
    {
        JOptionPane.showMessageDialog(null, "Invalid Input for Supplier ID", "Error", JOptionPane.ERROR_MESSAGE);
    } 
    catch (SQLException ex) 
    {
        JOptionPane.showMessageDialog(null, "Error occurred while updating Supplier's Details: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_updateBtnActionPerformed

    private boolean RowisDuplicated(String companyName, String emailAddress, int supplierID) 
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            String query = "SELECT * FROM supplier WHERE company = '" + companyName + "' AND email = '" + emailAddress + "' AND sup_ID != " + supplierID;
            ResultSet rs = st.executeQuery(query);
            return rs.next(); // If there's a result, it means duplicate data exists
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error occurred while checking for duplicate data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // Clear Button
        id.setText("Will Be Added Automatically");
        
        // Clear the selected item in the combo box if an item is selected
        if (med_id.getSelectedItem() != null) 
        {
            med_id.setSelectedIndex(-1);
        }
    
        company.setText("");
        med_Name.setText("");
        email.setText("@gmail.com");
        contactNo.setText("");
        contactPerson.setText("");
        Date.setDate(new java.util.Date()); 
    }//GEN-LAST:event_clearBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        String companyName, medicineName, emailAddress, contact_Person, dateAdded;
        int medicineID, contactNumber;

        companyName = company.getText().trim().toLowerCase();
        emailAddress = email.getText().trim().toLowerCase();
        contact_Person = contactPerson.getText().trim();
        
        // Validate that all required user input fields are filled
        if (companyName.isEmpty() || emailAddress.isEmpty() || contact_Person.isEmpty() || med_id.getSelectedItem() == null) 
        {
            JOptionPane.showMessageDialog(null, "Please fill all the required fields!",
                "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if any required user input field is blank
        }
        
        // Validate contact number before proceeding
        if (contactNo.getText().trim().length() != 10) 
        {
            JOptionPane.showMessageDialog(null, "Enter exactly 10 numerical values for the contact number",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit method if contact number is invalid
        }
        
        // Validate email address
        if (!emailAddress.endsWith("@gmail.com") || emailAddress.equals("@gmail.com")) 
        {
            JOptionPane.showMessageDialog(null, "Enter a valid Gmail address", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check if the company with the same name and email already exists
        if (isCompanyAlreadyRegistered(companyName, emailAddress)) 
        {
            JOptionPane.showMessageDialog(null, "The company you are trying to Add is already registered in the database!", "Duplicate Company", JOptionPane.ERROR_MESSAGE);
            
            // Exit the method
            return; 
        }
        medicineID = Integer.parseInt(med_id.getSelectedItem().toString());
        contactNumber = Integer.parseInt(contactNo.getText());
        dateAdded = new SimpleDateFormat("yyyy-MM-dd").format(Date.getDate());

        // Get the medicine name from the database
        medicineName = getMedicineNameByMedID(medicineID);
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT MAX(sup_ID) FROM supplier");
            int nextSupplierID = 1;

            if (rs.next()) 
            {
                nextSupplierID = rs.getInt(1) + 1;
            }

            int count = st.executeUpdate("INSERT INTO `supplier`(`sup_ID`, `med_ID`, `medName`,  `company` , `contact_person`, `email`, `phone_no` , `date`) VALUES ('" + nextSupplierID + "','" + medicineID + "','" + medicineName + "','" + companyName + "', '" + contact_Person + "', '" + emailAddress + "','" + contactNumber + "', '" + dateAdded + "')");

            if (count > 0) 
            {
                JOptionPane.showMessageDialog(null, "New Supplier's Details Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                refreshSuppliersTable();
            }
        } catch (SQLException e) 
        {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    //Checking if the company with the same name and email already exists
    private boolean isCompanyAlreadyRegistered(String companyName, String emailAddress) 
    {
        boolean companyExists = false;
        try
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rst = st.executeQuery("SELECT * FROM supplier WHERE LOWER(company) = '" + companyName + "' AND LOWER(email) = '" + emailAddress + "'");
            
            if (rst.next()) 
            {
                int count = rst.getInt(1);
                companyExists = count > 0; // If a Company with the same name and email found
            }
            rst.close();
            st.close();
            DBconnection.createDBconnection().close();
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error occurred while checking for duplicate company: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        return companyExists;
    }
    
    private String getMedicineNameByMedID(int medicineID) 
    {
        String medicineName = null;
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rst = st.executeQuery("SELECT med_name FROM medicine WHERE med_ID = " + medicineID);
            if (rst.next()) 
            {
                medicineName = rst.getString("med_name");
            }
            rst.close();
            st.close();
            DBconnection.createDBconnection().close();
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error occurred while fetching the medicine name: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return medicineName;
    }
    
    // Refresh the supplierTable after updating/deleting the selected supplier details
    private void refreshSuppliersTable() 
    {
         try 
         {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery(" SELECT * FROM supplier ");

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Supplier ID");
            model.addColumn("Company Name");
            model.addColumn("Medicine ID");
            model.addColumn("Medicine Name");
            model.addColumn("Email");
            model.addColumn("Contact No");
            model.addColumn("Contact Person");
            model.addColumn("Date");

            while (rs.next()) 
            {
                Object[] row = 
                {
                    rs.getInt("sup_ID"),
                    rs.getString("company"),
                    rs.getInt("med_ID"),
                    rs.getString("medName"),
                    rs.getString("email"),
                    rs.getInt("phone_no"),
                    rs.getString("contact_person"),
                    rs.getString("date")
                };
                model.addRow(row);
            }

            suppliersTable.setModel(model);
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error occurred while refreshing Table: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void demo_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demo_btnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_demo_btnActionPerformed

    private void medicine_inventory_page_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicine_inventory_page_btnActionPerformed
        // Medicine Details Button
        MedicineInventory obj = new MedicineInventory();
       obj.show();
       // Close the Dashboard
       this.dispose();
    }//GEN-LAST:event_medicine_inventory_page_btnActionPerformed

    private void contactNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactNoKeyPressed
        // Ensures that the user enters only numerical values for the contact number
        char c = evt.getKeyChar();

        // Validating the user inputs for the contact number
        if (!Character.isDigit(c) || contactNo.getText().length() >= 10)
        {
            evt.consume();
            // Consume the event to prevent the input
            JOptionPane.showMessageDialog(null, "Enter up to 10 numerical values for the contact number", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_contactNoKeyPressed

    private void contactPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactPersonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactPersonActionPerformed

    private void contactNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactNoActionPerformed

    private void contactPersonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactPersonKeyPressed
        // Ensures that the user enters only alphabetic values for the contact person
        char c = evt.getKeyChar();

        // Validating the user inputs for the contact person
        if (!Character.isLetter(c)) 
        {
            evt.consume(); // Consume the event to prevent the input

            // Display error message
            JOptionPane.showMessageDialog(null, "Please Enter Only Alphabetic Characters for the Contact Person", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_contactPersonKeyPressed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        //Delete Button
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to 'Delete' this Supplier?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) 
        {
            try 
            {
                Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
                String query = "DELETE FROM `supplier` WHERE `sup_ID` = " + Integer.parseInt(suppliersTable.getValueAt(suppliersTable.getSelectedRow(), 0).toString());

                //executeUpdate Method call to execute the DELETE query & returns the No of rows deleted
                int count = st.executeUpdate(query);  
                //System.out.println(query);

                //Data Validations 
                if (count > 0) 
                {
                    JOptionPane.showMessageDialog(null, "Selected Supplier's Details deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

                    // Refresh the suppliersTable after deleting
                    refreshSuppliersTable();
                }
                //Deselect previous selected rows
                suppliersTable.clearSelection();  
                refreshSuppliersTable();
            } 
                catch (Exception e) 
                {

                } 
            }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void suppliersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_suppliersTableMouseClicked
        //Get the index of the selected row
        int selectedRow = suppliersTable.getSelectedRow();
        
        //Establish the table model that represents the structure & data of the table
        TableModel model = suppliersTable.getModel(); 
        
        //Validationa to ensure that User interacts with the selected row data
        //Set the Company Name,Medicine ID,Medicine Name,Email,Contact No,Contact Person & Registered Date text fields to the value from the selected row
        company.setText(model.getValueAt(selectedRow, 1).toString());
        med_id.setSelectedItem(model.getValueAt(selectedRow, 2).toString());
        med_Name.setText(model.getValueAt(selectedRow, 3).toString());
        email.setText(model.getValueAt(selectedRow, 4).toString());
        contactNo.setText(model.getValueAt(selectedRow, 5).toString());
        contactPerson.setText(model.getValueAt(selectedRow, 6).toString());
        
        //Retrieve the data from the First Column(index 0)of the selected row & store it in supplierID
        id.setText(model.getValueAt(selectedRow, 0).toString());
        
        //Set the Date Format
        SimpleDateFormat sfd = new SimpleDateFormat("yyyy-MM-dd");
        String added_Date = (String) model.getValueAt(selectedRow, 7);
        
        try 
        {
          //Handle the parsing of the Registered Date
          Date register_Date = sfd.parse(added_Date); 
          Date.setDate(register_Date);
          
          // Disable Registered Date when user tries to update an existing data tuple
          Date.setEnabled(false);
        } 
        catch (ParseException e) 
        {
            // Handle the parsing exception,by displaying an error message.
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_suppliersTableMouseClicked

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String searchText = searchTxt.getText().trim();
        
        // Check if the search text is not empty
        if (!searchText.isEmpty())
        {
            try 
            {
                Statement st = DBconnection.createDBconnection().createStatement();
                ResultSet rs = st.executeQuery("SELECT * FROM supplier WHERE (sup_ID LIKE '%" + searchText + "%') || (company LIKE '%" + searchText + "%') || (medName LIKE '%" + searchText + "%')");

                // Create a table model to hold the search results
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("SupplierID");
                model.addColumn("Company Name");
                model.addColumn("Medicine ID");
                model.addColumn("Medicine Name");
                model.addColumn("Email");
                model.addColumn("Contact No");
                model.addColumn("Contact Person"); 
                model.addColumn("Date");
                
                 // Add the search results to the table model
                while (rs.next()) 
                {
                    Object[] row = 
                    {
                        rs.getInt("sup_ID"),
                        rs.getString("company"),
                        rs.getInt("med_ID"),
                        rs.getString("medName"),
                        rs.getString("email"),
                        rs.getString("phone_no"),
                        rs.getString("contact_person"),
                        rs.getString("date")
                    };
                    model.addRow(row);
                }
                
                // Set the table model to the JTable
                suppliersTable.setModel(model);
                
            } 
            catch (SQLException e) 
            {
                JOptionPane.showMessageDialog(null, "Error Occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } 
        else 
        {
            // If search text is empty, refresh the table with all suppliers
            refreshSuppliersTable();
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SupplierDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SupplierDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SupplierDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SupplierDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SupplierDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser Date;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField company;
    private javax.swing.JTextField contactNo;
    private javax.swing.JTextField contactPerson;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton demo_btn;
    private javax.swing.JTextField email;
    private javax.swing.JButton exitBtn;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextField med_Name;
    private javax.swing.JComboBox<String> med_id;
    private javax.swing.JButton medicine_inventory_page_btn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JTable suppliersTable;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
