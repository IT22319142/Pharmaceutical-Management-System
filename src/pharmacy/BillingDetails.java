package pharmacy;
//@author chathuni thennakoon

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;

public class BillingDetails extends javax.swing.JFrame {
    private int totalAmount = 0;
    private int discount = 0;
    private int balanceValue = 0;
    
    // HashMap to store the mapping between Order IDs and Customer IDs
    private final HashMap<String, Integer> orderCustomerMap = new HashMap<>();
    private int paidAmount;
    
    public BillingDetails() 
    {
        initComponents();
       
        //to get orderid combo box
        getOrderIDs();
        
        custName.setText("");
        orderdate.setDate(Date.from(Instant.now()));
        netamount.setText("0");
        AddLoyal.setText("0");
        totamount.setText("0");
        pamount.setText("0");
        pickupdate.setDate(Date.from(Instant.now()));
        balance.setText("0");
}  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        exitBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        logoutBtn = new javax.swing.JButton();
        addBtn1 = new javax.swing.JButton();
        billBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        printR = new javax.swing.JButton();
        viewR = new javax.swing.JButton();
        medID = new javax.swing.JLabel();
        medID2 = new javax.swing.JLabel();
        medID3 = new javax.swing.JLabel();
        medID4 = new javax.swing.JLabel();
        medID6 = new javax.swing.JLabel();
        medID7 = new javax.swing.JLabel();
        medID8 = new javax.swing.JLabel();
        medID10 = new javax.swing.JLabel();
        medID11 = new javax.swing.JLabel();
        medID12 = new javax.swing.JLabel();
        AddLoyal = new javax.swing.JTextField();
        disc = new javax.swing.JTextField();
        totamount = new javax.swing.JTextField();
        pamount = new javax.swing.JTextField();
        netamount = new javax.swing.JTextField();
        custName = new javax.swing.JTextField();
        orderdate = new com.toedter.calendar.JDateChooser();
        balance = new javax.swing.JTextField();
        pickupdate = new com.toedter.calendar.JDateChooser();
        medID13 = new javax.swing.JLabel();
        OrdID = new javax.swing.JComboBox<>();
        rID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        bill = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        backBtn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 153, 102));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        exitBtn.setBackground(new java.awt.Color(0, 153, 102));
        exitBtn.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        exitBtn.setText("x");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 102));
        jLabel3.setText("Billing Details");

        logoutBtn.setBackground(new java.awt.Color(102, 204, 0));
        logoutBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        logoutBtn.setText("Logout");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        addBtn1.setBackground(new java.awt.Color(102, 204, 0));
        addBtn1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addBtn1.setText("Add");
        addBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBtn1MouseClicked(evt);
            }
        });
        addBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtn1ActionPerformed(evt);
            }
        });

        billBtn.setBackground(new java.awt.Color(102, 204, 0));
        billBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        billBtn.setText("Bill");
        billBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(102, 204, 0));
        clearBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        printR.setBackground(new java.awt.Color(102, 204, 0));
        printR.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        printR.setText("Print Receipt");
        printR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printRActionPerformed(evt);
            }
        });

        viewR.setBackground(new java.awt.Color(102, 204, 0));
        viewR.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        viewR.setText("View Receipt");
        viewR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRActionPerformed(evt);
            }
        });

        medID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID.setText("Order ID");

        medID2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID2.setText("Net Amount");

        medID3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID3.setText("Customer Name");

        medID4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID4.setText("Order Date");

        medID6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID6.setText("Discount");

        medID7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID7.setText("Total Amount");

        medID8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID8.setText("Added Loyalty Points");

        medID10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID10.setText("Balance");

        medID11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID11.setText("Paid Amount");

        medID12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID12.setText("Pickup Date");

        AddLoyal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddLoyalActionPerformed(evt);
            }
        });

        disc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discActionPerformed(evt);
            }
        });

        totamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totamountActionPerformed(evt);
            }
        });

        pamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pamountActionPerformed(evt);
            }
        });

        netamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netamountActionPerformed(evt);
            }
        });

        custName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custNameActionPerformed(evt);
            }
        });

        balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceActionPerformed(evt);
            }
        });

        medID13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID13.setText("Receipt ID");

        OrdID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        rID.setEditable(false);
        rID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rIDActionPerformed(evt);
            }
        });

        bill.setColumns(20);
        bill.setRows(5);
        jScrollPane1.setViewportView(bill);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 102));
        jLabel4.setText("-Payment Receipt-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(401, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(276, 276, 276)
                .addComponent(logoutBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exitBtn)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(medID3)
                    .addComponent(medID2)
                    .addComponent(medID6)
                    .addComponent(medID7)
                    .addComponent(medID10)
                    .addComponent(medID12)
                    .addComponent(medID)
                    .addComponent(medID11)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(medID8, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(medID4))
                    .addComponent(medID13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AddLoyal, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(custName, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(netamount, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(totamount, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(pamount, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(balance)
                            .addComponent(pickupdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(orderdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OrdID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(disc, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(billBtn)
                        .addGap(279, 279, 279)
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(229, 229, 229))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(viewR, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(212, 212, 212)
                        .addComponent(printR, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(addBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 281, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(logoutBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medID13)
                            .addComponent(rID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medID)
                            .addComponent(OrdID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(custName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(medID3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(netamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(medID2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(medID4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddLoyal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(medID8))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medID6)
                            .addComponent(disc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medID7)
                            .addComponent(totamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medID11)
                            .addComponent(pamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medID10)
                            .addComponent(balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medID12)
                            .addComponent(pickupdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn1)
                    .addComponent(billBtn)
                    .addComponent(clearBtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewR)
                    .addComponent(printR))
                .addGap(20, 20, 20))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("MediCare Pharmaceuticals");

        jLabel2.setIcon(new javax.swing.ImageIcon("D:\\Pharmacy Management System\\Pharmacy\\Images\\Billing.png")); // NOI18N

        backBtn.setBackground(new java.awt.Color(102, 204, 0));
        backBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        backBtn1.setBackground(new java.awt.Color(102, 204, 0));
        backBtn1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backBtn1.setText("Demo");
        backBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backBtn1)
                            .addComponent(backBtn))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(backBtn)
                .addGap(18, 18, 18)
                .addComponent(backBtn1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // Back Button -> navigates to the Dashboard
        this.dispose();
        Dashboard obj = new Dashboard();
        obj.show();
    }//GEN-LAST:event_backBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        //Logout Button
        this.dispose();
        Loginform obj = new Loginform();
        obj.show();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private String getCustomerNameByID(int custID)
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT f_name, l_name FROM doctor WHERE cust_ID = " + custID);

            if (rs.next()) 
            {
                String customerName = rs.getString("f_name") + " " + rs.getString("l_name");
                return customerName;
            }

        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error fetching customer name: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null; // Return null if no customer name found
    }
    
    private int getNetAmountByID(int OrderID)
    {
        try 
        {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT netamount FROM ordersnew WHERE OID = " + OrderID);

            if (rs.next()) 
            {
                int netAmnt = rs.getInt("netamount");
                return netAmnt;
            }
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error fetching net amount: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return -99; // Return null if no customer name found
    }
    
    // Method to populate Order IDs combo box
    private void getOrderIDs() 
    {
        try 
        {
            try (Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rst = st.executeQuery("SELECT OID, CID FROM ordersnew")) 
            {

                // Clear existing items in the combo box
                OrdID.removeAllItems();

                // Populate combo box with Order IDs
                while (rst.next()) 
                {
                    // Store order IDs in the combo box
                    int orderID = rst.getInt("OID");
                    OrdID.addItem(String.valueOf(orderID));

                    // Retrieve and display customer name for each order ID
                    int custID = rst.getInt("CID");
                    String customerName = getCustomerNameByID(custID);
                    String totAmount = String.valueOf(getNetAmountByID(orderID)); // Getting net amount for the order
                    
                    // Set customer name in the text field
                    custName.setText(customerName);
                    netamount.setText(totAmount);
                    // Set net amount in the corresponding field
                    totamount.setText(totAmount);
                }
            }
            DBconnection.createDBconnection().close();
        } 
        catch (SQLException ex) 
        {
            // Handle exceptions
            JOptionPane.showMessageDialog(null, "Error fetching Order IDs: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
   
        // Add action listener to the combo box to dynamically fetch and display customer name
        OrdID.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                // Get the selected order ID from the combo box
                int selectedOrderID = Integer.parseInt(OrdID.getSelectedItem().toString());
                fetchOrderDetails(selectedOrderID);
            }
        });
    }
    
    // Method to fetch and display associated data when an order ID is selected
private void fetchOrderDetails(int selectedOrderID) 
{
    try 
    {
        Statement st = DBconnection.createDBconnection().createStatement();
        ResultSet rs = st.executeQuery("SELECT CID, netamount,date FROM ordersnew WHERE OID = " + selectedOrderID);

        if (rs.next()) 
        {
            int custID = rs.getInt("CID");
            String customerName = getCustomerNameByID(custID);
            String netAmount = String.valueOf(rs.getInt("netamount"));
            Date orderDate = rs.getDate("date");
            System.out.println("Order Date from Database: " + orderDate); // Debug statement
   
            // Set customer name in the text field
            custName.setText(customerName);
            orderdate.setDate(orderDate);
            // Set net amount in the corresponding field
            netamount.setText(netAmount);
            
            // Set order date in the corresponding field
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // Define the desired date format
            String formattedOrderDate = sdf.format(orderDate); // Format the date
            
            // Calculate added loyalty points based on net amount
            calculateAddedLoyaltyPoints();

            // Calculate total loyalty points (addLoyal + loyalty_points)
            int addedLoyalty = Integer.parseInt(AddLoyal.getText());
           // int totalLoyalty = addedLoyalty + customerLoyaltyPoints;
            
            // Calculate total amount
            calculateTotalAmount();

            // Calculate balance
            calculateBalance();
        }
    } 
    catch (SQLException ex) 
    {
        JOptionPane.showMessageDialog(null, "Error fetching order details: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        //Exit Button
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    // Method to apply discount based on total loyalty points
    private void applyDiscount(int addedLoyalty) 
    {
        int discount = 0;
        
        if (addedLoyalty > 30) 
        {
            // Apply 7% discount
            discount = (int) (Integer.parseInt(netamount.getText()) * 0.07);
        }
        // Set discount in the corresponding field
        disc.setText(String.valueOf(discount));
   }
// Declare the JTextField

    // Method to calculate total amount
    private int calculateTotalAmount() 
    {
        String inputString = netamount.getText().trim();
        
        if (inputString.isEmpty()) 
        {
            // Handle empty input
            return 0; // or throw an exception, depending on your requirements
        }
        try 
        {
            int totalAmount = Integer.parseInt(inputString);
            // Perform any additional calculations if needed
            return totalAmount;
        } 
        catch (NumberFormatException ex) 
        {
            // Handle parsing errors
            JOptionPane.showMessageDialog(null, "Error parsing total amount: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return 0; // or throw an exception, depending on your requirements
        }  
    }

    // Method to calculate balance
    private void calculateBalance() 
    {
        int totalAmount = Integer.parseInt(totamount.getText());
        int paidAmount = Integer.parseInt(pamount.getText());
        int balance = paidAmount - totalAmount;
        // Set balance in the corresponding field
        this.balance.setText(String.valueOf(balance));
    }

    private void calculateFieldsAndUpdate() 
    {
        try 
        {
            // Get values from text fields
            int netAmount = Integer.parseInt(netamount.getText());
            int addedLoyalty = netAmount / 1000; // Calculate added loyalty points based on net amount
            int totalAmount = netAmount;

            // Update text fields with calculated values
            AddLoyal.setText(String.valueOf(addedLoyalty));
            totamount.setText(String.valueOf(totalAmount));

            // Apply discount based on added loyalty points
            int discount = (addedLoyalty > 15) ? (int) (netAmount * 0.07) : 0;
            disc.setText(String.valueOf(discount));

            // Calculate balance
            int paidAmount = Integer.parseInt(pamount.getText());
            int balance = totalAmount - paidAmount;
            this.balance.setText(String.valueOf(balance));
        } 
        catch (NumberFormatException ex) 
        {
            // Handle parsing errors
            JOptionPane.showMessageDialog(null, "Error calculating fields: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                       
    
    private void calculateAddedLoyaltyPoints() 
    {
        try 
        {
            int netAmt = Integer.parseInt(netamount.getText());
            int addedLoyalty = netAmt / 1000; // Calculate added loyalty points based on net amount
            AddLoyal.setText(String.valueOf(addedLoyalty));
        } 
        catch (NumberFormatException ex) 
        {
                JOptionPane.showMessageDialog(null, "Error calculating added loyalty points: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } 
    
    // Method to perform calculations and update text fields
    private void performCalculationsAndUpdateFields() 
    {
        // Get values from text fields
        int netAmount = Integer.parseInt(netamount.getText());
        int discount = Integer.parseInt(disc.getText());
        int totalAmount = netAmount - discount;
        int paidAmount = Integer.parseInt(pamount.getText());
        int addedLoyalty = netAmount / 1000; // Calculate added loyalty points based on net amount
        //int totalLoyalty = totalAmount / 1000; // Calculate total loyalty points based on total amount
        int balance = totalAmount - paidAmount;

        // Update text fields with calculated values
        totamount.setText(String.valueOf(totalAmount));
        //totalLoyal.setText(String.valueOf(totalLoyalty));
        AddLoyal.setText(String.valueOf(addedLoyalty));
        //balance.setText(String.valueOf(alance));
    }
    
    private void addBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtn1ActionPerformed
       //Add Button
        String custname, orderDate, pickupDate;
        int orderID, addedLoyalty = 0, netAmount = 0, Discount = 0, totalAmount = 0, paidAmount = 0, Balance = 0;
              
        orderID = Integer.parseInt(OrdID.getSelectedItem().toString());

        // Get the associated customer ID
        try 
        {
            addedLoyalty = Integer.parseInt(AddLoyal.getText());
            netAmount = Integer.parseInt(netamount.getText());
            totalAmount = Integer.parseInt(totamount.getText());
            paidAmount = Integer.parseInt(pamount.getText());
            //Balance = Integer.parseInt(balance.getText());
        } 
        catch (NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(null, "Invalid Amount input. Please enter valid numbers.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        custname = custName.getText();
        
        if (addedLoyalty > 1) 
        {
            // Apply 7% discount
            Discount = (int) (netAmount * 0.07);
        }

        totalAmount = netAmount - Discount;
        addedLoyalty = netAmount / 100;
        Balance = totalAmount - paidAmount;
        
        //Validating the date formatting
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        orderDate = sdf.format(orderdate.getDate());
        pickupDate = sdf.format(pickupdate.getDate());
        Date currentDate = new Date(); // Current date
        pickupdate.setMinSelectableDate(new Date()); // Disabling past dates
        Date selectedDate = pickupdate.getDate(); // Selected date

        if (!pickupDate.equals(sdf.format(new Date()))) 
        {
            JOptionPane.showMessageDialog(null, "Pickup date should be today's date.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if pickup date is not today's date
        }
        //Validations of Database Interaction
        try 
        {
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();

            //Fetch the next avaialable Order ID from the Database
            ResultSet rs = st.executeQuery("SELECT MAX(receiptID) FROM billing");
            int nextreceiptID = 1;

            if (rs.next()) 
            {
                nextreceiptID = rs.getInt(1) + 1;
            }

            int count = st.executeUpdate("INSERT INTO billing (receiptID, OrderID, f_name, Netamount, orderdate, addLoyal, discount, totAmount, paidAmount, balance, pickupdate) VALUES ('" + nextreceiptID + "','" + orderID + "','" + custname + "','" + netAmount + "','" + orderDate + "','" + addedLoyalty + "','" + Discount + "','" + totalAmount + "','" + paidAmount + "','" + Balance + "','" + pickupDate + "')");
             int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to add billing data?", "Confirmation", JOptionPane.YES_NO_OPTION);
    if (option == JOptionPane.YES_OPTION) 
            {
                JOptionPane.showMessageDialog(null, "Billing Details Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                // Refresh the table after adding the billing details
                //refreshBillingTable();
                
                String query = "UPDATE `ordersnew` SET `order_status` = 'Complete' WHERE `ordersnew`.`OID` = '"+orderID+"'";
                
                int i = st.executeUpdate(query);
                if(i > 0)
                {
                    JOptionPane.showMessageDialog(null, "Selected Order Details Updated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "Failed to add billing details", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(null, "Invalid Input for Billing Details...!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(null, "Failed to add billing details. Exception: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
        private void enterKeyPressed(java.awt.event.KeyEvent evt) 
        {
            // If the Enter key is pressed while in the netamount text field,
            // trigger the calculation and update process
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) 
            {
                netamountActionPerformed(null);
            }
    }//GEN-LAST:event_addBtn1ActionPerformed

    private void billBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billBtnActionPerformed
        billReceipt obj= new billReceipt();
        obj.show();
        this.dispose();
        
        // Get the values from the fields
        int receiptID = Integer.parseInt(rID.getText());
        int orderID = Integer.parseInt(OrdID.getSelectedItem().toString());
        String custname = custName.getText();
        int addedLoyalty = Integer.parseInt(AddLoyal.getText());
        
        // int totalLoyalty = Integer.parseInt(totalLoyal.getText());
        int netAmount = Integer.parseInt(netamount.getText());
        int discount = Integer.parseInt(disc.getText());
        int totalAmount = Integer.parseInt(totamount.getText());
        int paidAmount = Integer.parseInt(pamount.getText());
        int Balance = Integer.parseInt(balance.getText());
        String orderDate = new SimpleDateFormat("yyyy-MM-dd").format(orderdate.getDate());
        String pickupDate = new SimpleDateFormat("yyyy-MM-dd").format(pickupdate.getDate());

        // Validation for pickup date
        if (!pickupDate.equals(new SimpleDateFormat("yyyy-MM-dd").format(new Date()))) 
        {
            JOptionPane.showMessageDialog(null, "Pickup date should be today's date.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_billBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
    custName.setText("");
    netamount.setText("0");
    AddLoyal.setText("0");
    totamount.setText("0");
    disc.setText("0");
    pamount.setText("0");
    balance.setText("0");
    
    // Reset the date picker components to the current date
    orderdate.setDate(Date.from(Instant.now()));
    pickupdate.setDate(Date.from(Instant.now()));
    }//GEN-LAST:event_clearBtnActionPerformed

    private void printRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printRActionPerformed
 
            try {
        bill.print();
    }
    
    catch (Exception e) { 
            
            } 
       
    }//GEN-LAST:event_printRActionPerformed

    private void viewRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRActionPerformed
        try 
        {
            // Query to fetch the most recent billing details from the database
            String query = "SELECT * FROM billing ORDER BY receiptID DESC LIMIT 1";
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery(query);

            if (rs.next()) 
            {
                // Extract data from the result set
                int receiptID = rs.getInt("receiptID");
                String customerName = rs.getString("f_name");
                int netAmount = rs.getInt("Netamount");
                //int totalLoyaltyPoints = rs.getInt("totLoyal");
                int addedLoyaltyPoints = rs.getInt("addLoyal");
                int totalAmount = rs.getInt("totAmount");
                int discount = rs.getInt("discount");
                int paidAmount = rs.getInt("paidAmount");
                int Balance = rs.getInt("balance");
                Date orderDate = rs.getDate("orderdate");
                Date pickupDate = rs.getDate("pickupdate");

                // Display the billing details in the text area
                bill.setText("                             .......MediCare Pharmaceuticals.......\n\n"
                        + "\n\n ReceiptID \t\t " + receiptID + "\n\n Customer Name\t: " + customerName
                        + "\n\n NetAmount\t\t: Rs. " + netAmount +"\n\n AddedLoyaltyPoints\t: " + addedLoyaltyPoints 
                        + "\n\n OrderDate\t\t: " + orderDate + "\n\n Discount\t\t: " + discount +  "\n\n TotalAmount\t\t: Rs. " + totalAmount +"\n\n PaidAmount\t\t: Rs. " + paidAmount
                        + "\n\n Balance\t\t: Rs. " + Balance + "\n\n PickupDate\t\t: " + pickupDate + "\n");
            } 
            else 
            {
                JOptionPane.showMessageDialog(null, "No billing details found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error fetching billing details: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewRActionPerformed

    private void AddLoyalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddLoyalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddLoyalActionPerformed

    private void discActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discActionPerformed
        // Update discount variable with the entered value
        discount = Integer.parseInt(disc.getText());

        // Calculate fields and update them
        calculateFieldsAndUpdate();
    }//GEN-LAST:event_discActionPerformed

    private void totamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totamountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totamountActionPerformed

    private void pamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pamountActionPerformed
        //  String enteredPaidAmount = pamount.getText().trim();
    
        // Validate if the entered value is a valid integer
        try 
        {
            String enteredPaidAmount = pamount.getText().trim();
            int paidAmount = Integer.parseInt(enteredPaidAmount);

            // Check if the entered value is negative
            if (paidAmount < 0) 
            {
                JOptionPane.showMessageDialog(null, "Paid amount cannot be negative.", "Error", JOptionPane.ERROR_MESSAGE);
                pamount.setText(""); // Clear the field
            } 
            else 
            {
                // Update paidAmount variable with the entered value
                this.paidAmount = paidAmount;

                // Calculate fields and update them
                calculateFieldsAndUpdate();
            }
        } 
        catch (NumberFormatException ex) 
        {
            JOptionPane.showMessageDialog(null, "Please enter a valid integer for the paid amount.", "Error", JOptionPane.ERROR_MESSAGE);
            pamount.setText(""); // Clear the field
        }
        // Calculate fields and update them
        calculateFieldsAndUpdate();
    }//GEN-LAST:event_pamountActionPerformed

    private void netamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netamountActionPerformed
        try 
        {
            int netAmount = Integer.parseInt(netamount.getText());

            // Calculate added loyalty points
            int addedLoyalty = netAmount / 1000; // 1 loyalty point for every 1000 rupees

            // Update added loyalty points field
            AddLoyal.setText(String.valueOf(addedLoyalty));

            calculateFieldsAndUpdate();

            // Calculate total amount
            calculateTotalAmount();

            // Calculate balance
            calculateBalance();
        } 
        catch (NumberFormatException ex) 
        {
            // Handle parsing errors
            // Display error message or perform appropriate action
        }    
    }//GEN-LAST:event_netamountActionPerformed

    private void custNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custNameActionPerformed

    private void balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_balanceActionPerformed

    private void rIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rIDActionPerformed

    private void backBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backBtn1ActionPerformed

    private void addBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBtn1MouseClicked
       
    }//GEN-LAST:event_addBtn1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillingDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BillingDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddLoyal;
    private javax.swing.JComboBox<String> OrdID;
    private javax.swing.JButton addBtn1;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton backBtn1;
    private javax.swing.JTextField balance;
    private javax.swing.JTextArea bill;
    private javax.swing.JButton billBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField custName;
    private javax.swing.JTextField disc;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JLabel medID;
    private javax.swing.JLabel medID10;
    private javax.swing.JLabel medID11;
    private javax.swing.JLabel medID12;
    private javax.swing.JLabel medID13;
    private javax.swing.JLabel medID2;
    private javax.swing.JLabel medID3;
    private javax.swing.JLabel medID4;
    private javax.swing.JLabel medID6;
    private javax.swing.JLabel medID7;
    private javax.swing.JLabel medID8;
    private javax.swing.JTextField netamount;
    private com.toedter.calendar.JDateChooser orderdate;
    private javax.swing.JTextField pamount;
    private com.toedter.calendar.JDateChooser pickupdate;
    private javax.swing.JButton printR;
    private javax.swing.JTextField rID;
    private javax.swing.JTextField totamount;
    private javax.swing.JButton viewR;
    // End of variables declaration//GEN-END:variables
}
