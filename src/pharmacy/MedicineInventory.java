package pharmacy;
//@author mashi

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class MedicineInventory extends javax.swing.JFrame 
{
    //Creates new form MedicineInventory
    
    public MedicineInventory() 
    {
        initComponents();
        
        refreshMedicineTable();
        //The method to populate the medicine type combo box
        getMedType();
        
        med_id.setText("Will Be Added Automatically");
        medName.setText("");
        med_dosage.setText("");
        unitPrice.setText("0");
        storageLocation.setText("");
        date_added.setDate(Date.from(Instant.now()));
        qty.setText("1");
    }

    // Populate the medicine types combo box
    private void getMedType() 
    {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Allergic");
        model.addElement("Analgesics");
        model.addElement("Angiotensin II Receptor");
        model.addElement("Antibiotics");
        model.addElement("Antidepressants");
        model.addElement("Antidiabetics");
        model.addElement("Antihypertensives");
        type.setModel(model);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        BackBtn = new javax.swing.JButton();
        stockPage = new javax.swing.JButton();
        Demo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        medID = new javax.swing.JLabel();
        medID1 = new javax.swing.JLabel();
        medID4 = new javax.swing.JLabel();
        medID6 = new javax.swing.JLabel();
        medID7 = new javax.swing.JLabel();
        medID8 = new javax.swing.JLabel();
        medID9 = new javax.swing.JLabel();
        medID10 = new javax.swing.JLabel();
        med_id = new javax.swing.JTextField();
        medName = new javax.swing.JTextField();
        med_dosage = new javax.swing.JTextField();
        qty = new javax.swing.JTextField();
        unitPrice = new javax.swing.JTextField();
        storageLocation = new javax.swing.JTextField();
        updateBtn = new javax.swing.JButton();
        AddBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        type = new javax.swing.JComboBox<>();
        logOutBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        medicineSearchBar = new javax.swing.JTextField();
        updateBtn1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicineTable = new javax.swing.JTable();
        date_added = new com.toedter.calendar.JDateChooser();
        InventoryReport = new javax.swing.JButton();
        Re_Order = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 153, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Medicare Pharmaceuticals");

        jLabel2.setIcon(new javax.swing.ImageIcon("D:\\Pharmacy Management System\\Pharmacy\\Images\\medicineIcon.png")); // NOI18N
        jLabel2.setText("jLabel2");

        BackBtn.setBackground(new java.awt.Color(51, 204, 0));
        BackBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        stockPage.setBackground(new java.awt.Color(51, 204, 0));
        stockPage.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        stockPage.setText("Stock Management");
        stockPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockPageActionPerformed(evt);
            }
        });

        Demo.setBackground(new java.awt.Color(51, 204, 0));
        Demo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Demo.setText("Demo");
        Demo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DemoActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setBackground(new java.awt.Color(0, 153, 102));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 102));
        jLabel3.setText("Medicine Inventory");

        medID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID.setText("Medicine ID");

        medID1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID1.setText("Medicine Name");

        medID4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID4.setText("Quantity");

        medID6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID6.setText("Storage Location");

        medID7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID7.setText("Date Added");

        medID8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID8.setText("Medicine Type");

        medID9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID9.setText("Unit Price");

        medID10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        medID10.setText("Dosage");

        med_id.setEditable(false);
        med_id.setText("Will be generated automatically");
        med_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                med_idActionPerformed(evt);
            }
        });

        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                qtyKeyPressed(evt);
            }
        });

        unitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitPriceActionPerformed(evt);
            }
        });
        unitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                unitPriceKeyPressed(evt);
            }
        });

        storageLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storageLocationActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(102, 204, 0));
        updateBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        AddBtn.setBackground(new java.awt.Color(102, 204, 0));
        AddBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddBtn.setText("Add");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(102, 204, 0));
        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(102, 204, 0));
        clearBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });

        logOutBtn.setBackground(new java.awt.Color(102, 204, 0));
        logOutBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        logOutBtn.setText("Logout");
        logOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutBtnActionPerformed(evt);
            }
        });

        exitBtn.setBackground(new java.awt.Color(0, 153, 102));
        exitBtn.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        exitBtn.setText("x");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel4.setText("Available Medicine List");

        medicineSearchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                medicineSearchBarKeyPressed(evt);
            }
        });

        updateBtn1.setBackground(new java.awt.Color(102, 204, 0));
        updateBtn1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        updateBtn1.setText("Search");
        updateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtn1ActionPerformed(evt);
            }
        });

        medicineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Medicine ID", "Medicine Name", "Type", "Dosage", "Unit Price", "Storage Location", "Date Added", "Quantity"
            }
        ));
        medicineTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medicineTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(medicineTable);

        InventoryReport.setBackground(new java.awt.Color(102, 204, 0));
        InventoryReport.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        InventoryReport.setText("Generate Inventory Report");
        InventoryReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InventoryReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(medicineSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateBtn1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(InventoryReport)
                                .addGap(96, 96, 96))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(291, 291, 291)
                                .addComponent(logOutBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(exitBtn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medID1)
                            .addComponent(medID)
                            .addComponent(medID10)
                            .addComponent(medID8)
                            .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(updateBtn)
                                .addGap(149, 149, 149)
                                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(med_id, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(medName, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(med_dosage, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(74, 74, 74)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(medID4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(medID7)
                                    .addComponent(medID6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(medID9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(date_added, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(storageLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(unitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(131, 131, 131)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(med_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(medID)
                            .addComponent(medID9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(medName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(storageLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(medID1)
                            .addComponent(medID6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(date_added, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(medID7)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(medID8)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(med_dosage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(medID10)
                        .addComponent(medID4))
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddBtn)
                    .addComponent(updateBtn)
                    .addComponent(clearBtn)
                    .addComponent(deleteBtn))
                .addGap(61, 61, 61)
                .addComponent(jLabel4)
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(medicineSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn1)
                    .addComponent(InventoryReport))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(506, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel2);

        Re_Order.setBackground(new java.awt.Color(51, 204, 0));
        Re_Order.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Re_Order.setText("Re Ordering");
        Re_Order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Re_OrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Demo)
                                    .addComponent(BackBtn)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(stockPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Re_Order, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1195, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(BackBtn)
                .addGap(18, 18, 18)
                .addComponent(Demo)
                .addGap(88, 88, 88)
                .addComponent(stockPage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Re_Order)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1057, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        // Back Button -> navigates to the Dashboard
        this.dispose();
        Dashboard obj = new Dashboard();
        obj.show();
    }//GEN-LAST:event_BackBtnActionPerformed

    private void med_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_med_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_med_idActionPerformed

    private void unitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unitPriceActionPerformed

    private void storageLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storageLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_storageLocationActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // Update Button action performed method
    try {
        String med_Name, date_Added, medicineType, dosage, storage_Location;
        int quantity, unit_Price;
        int Newqty = 0;

        med_Name = medName.getText();
        // Get medicine type from the combo box
        medicineType = (String) type.getSelectedItem();
        dosage = med_dosage.getText();
        storage_Location = storageLocation.getText();

        //Validating the date formatting
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        date_Added = sdf.format(date_added.getDate());

        // User input validation
        quantity = Integer.parseInt(qty.getText());
        unit_Price = Integer.parseInt(unitPrice.getText());

        // Validations of Database Interaction
        try {
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
            int x = Integer.parseInt(med_id.getText());

            // Validations related to SQL
            String query = "UPDATE medicine SET med_name = ?, Type = ?, Dosage = ?, unit_price = ?, Storage_Location = ?, dateAdded = ?, qty = ? WHERE med_ID = ?";

            // Use PreparedStatement to avoid SQL injection
            java.sql.PreparedStatement prepSt = st.getConnection().prepareStatement(query);

            prepSt.setString(1, med_Name);
            prepSt.setString(2, medicineType);
            prepSt.setString(3, dosage);
            prepSt.setInt(4, unit_Price);
            prepSt.setString(5, storage_Location);
            prepSt.setString(6, date_Added);
            prepSt.setInt(7, quantity);
            prepSt.setInt(8, x);

            int count = prepSt.executeUpdate();

            if (count > 0) {
                JOptionPane.showMessageDialog(null, "Selected Medicine Details Updated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Refresh the Customer Table after updating
                refreshMedicineTable();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update Medicine Details", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error occurred while Updating the selected medicine's details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid Input for Medicine!", "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_updateBtnActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        //Add Button
        String med_Name, date_Added, medicineType, dosage, storage_Location;
    int quantity, unit_Price;
    int Newqty = 0;
    med_Name = medName.getText();

    // Get medicine type from the combo box
    medicineType = (String) type.getSelectedItem();
    dosage = med_dosage.getText();
    storage_Location = storageLocation.getText();

    //Validating the date formatting
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    date_Added = sdf.format(date_added.getDate());

    // User input validation
    try {
        unit_Price = Integer.parseInt(unitPrice.getText());
        quantity = Integer.parseInt(qty.getText());

        // Confirmation message before adding
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to 'Add' this medicine?", "Confirm Add", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return; // If user clicks NO, do not proceed with the addition
        }

        // Validations of Database Interaction
        try {
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();

            // Fetch the next available Medicine ID from the Database
            ResultSet rs = st.executeQuery("SELECT MAX(med_ID) FROM medicine");
            int nextMedID = 1;

            if (rs.next()) {
                nextMedID = rs.getInt(1) + 1;
            }

            boolean isAlreadyExist = false;
            ResultSet rsExist = st.executeQuery("SELECT COUNT(*) AS count FROM `medicine` WHERE `med_name` = '" + med_Name + "' AND `Storage_Location` = '" + storage_Location + "'");
            if (rsExist.next()) {
                int countExist = rsExist.getInt("count");
                if (countExist > 0) {
                    isAlreadyExist = true;
                }
            }

            int count;
            if (!isAlreadyExist) {
                count = st.executeUpdate("INSERT INTO `medicine`(`med_ID`, `med_name`, `Type`,  `Dosage` , `unit_price`, `Storage_Location` , `dateAdded`, `qty`) VALUES ('" + nextMedID + "','" + med_Name + "','" + medicineType + "','" + dosage + "', '" + unit_Price + "','" + storage_Location + "', '" + date_Added + "', '" + quantity + "')");
            } else {
                ResultSet qtyResult = st.executeQuery("SELECT `qty` FROM `medicine` WHERE `med_name` = '" + med_Name + "' AND `Storage_Location` = '" + storage_Location + "'");
                if (qtyResult.next()) {
                    Newqty = qtyResult.getInt("qty");
                }
                Newqty += quantity;

                count = st.executeUpdate("UPDATE `medicine` SET `qty`='" + Newqty + "' WHERE `med_name` = '" + med_Name + "' AND `Storage_Location` = '" + storage_Location + "' ");
            }

            if (count > 0) {
                JOptionPane.showMessageDialog(null, "New Medicine Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);

                // Refresh the table after adding the New Medicine Details
                refreshMedicineTable();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error occurred while interacting with the database: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid Input for Quantity or Unit Price", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_AddBtnActionPerformed

    // Refresh the medicineTable after updating/deleting the selected medicine
    private void refreshMedicineTable() {
        try {
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM medicine");

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Medicine ID");
            model.addColumn("Medicine Name");
            model.addColumn("Medicine Type");
            model.addColumn("Dosage");
            model.addColumn("Unit Price");
            model.addColumn("Storage Location");
            model.addColumn("Date Added");
            model.addColumn("Quantity");

            while (rs.next()) {
                Object[] row = {
                        rs.getInt("med_ID"),
                        rs.getString("med_name"),
                        rs.getString("Type"),
                        rs.getString("Dosage"),
                        rs.getInt("unit_price"),
                        rs.getString("Storage_Location"),
                        rs.getString("dateAdded"),
                        rs.getInt("qty")
                };
                model.addRow(row);
            }

            medicineTable.setModel(model);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error occurred while refreshing Table: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int selectedRowIndex = medicineTable.getSelectedRow();
        if (selectedRowIndex != -1) {
            String medName = (String) medicineTable.getValueAt(selectedRowIndex, 1);

            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to 'Delete' this medicine?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
                    int count = st.executeUpdate("DELETE FROM medicine WHERE med_name='" + medName + "'");

                    if (count > 0) {
                        JOptionPane.showMessageDialog(null, "Medicine deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        refreshMedicineTable();
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error occurred while deleting medicine: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // Clear Button
        med_id.setText("Will Be Added Automatically");
        medName.setText("");
        type.setSelectedIndex(-1);
        med_dosage.setText("");
        unitPrice.setText("0.00");
        storageLocation.setText("");
        date_added.setDate(Date.from(Instant.now()));
        qty.setText("1");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void logOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutBtnActionPerformed
        //Logout Button 
        this.dispose(); 
        Loginform obj = new Loginform();
        obj.show();
    }//GEN-LAST:event_logOutBtnActionPerformed

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        //Exit Button
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed

    private void updateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateBtn1ActionPerformed

    private void InventoryReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InventoryReportActionPerformed
        // TODO add your handling code here:
         ReportGenerator.generatePrintedReport(medicineTable);

    }//GEN-LAST:event_InventoryReportActionPerformed

    
    public class ReportGenerator {

    public static void generatePrintedReport(JTable table) {
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        
        if (printerJob.printDialog()) {
            printerJob.setJobName("Medicine Inventory Report");
            printerJob.setPrintable(new Printable() {
                @Override
                public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                    if (pageIndex > 0) {
                        return Printable.NO_SUCH_PAGE;
                    }

                    Graphics2D g2d = (Graphics2D) graphics;
                    g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());

                    table.printAll(graphics);

                    return Printable.PAGE_EXISTS;
                }
            });

            try {
                printerJob.print();
                System.out.println("Report sent to printer successfully!");
            } catch (PrinterException ex) {
                ex.printStackTrace();
            }
        }
    }
}
    private void stockPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockPageActionPerformed
       //Stock Page Button
        StocksDetails obj = new StocksDetails();
       obj.show();
       // Close the Dashboard
       this.dispose();
    }//GEN-LAST:event_stockPageActionPerformed

    private void DemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DemoActionPerformed
        medName.setText("Panadol");
        med_dosage.setText("2 tablet");
        unitPrice.setText("4");
        storageLocation.setText("A602");
        qty.setText("100");

    }//GEN-LAST:event_DemoActionPerformed

    private void unitPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPriceKeyPressed
        //Ensures that the user enters only the numerical values for price
        char c = evt.getKeyChar();
        
        //Validating the user inputs for the unit price
        if(Character.isLetter(c))
        {
            qty.setEditable(false);
            JOptionPane.showMessageDialog(null, "Enter Numerical Values for the Unit Price","Error",JOptionPane.ERROR_MESSAGE);
            qty.setEditable(true);
        }
    }//GEN-LAST:event_unitPriceKeyPressed

    private void qtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyPressed
        //Ensures that the user enters only the numerical values for quantity
        char c = evt.getKeyChar();
        
        //Validating the user inputs for the quantity
        if(Character.isLetter(c))
        {
            qty.setEditable(false);
            JOptionPane.showMessageDialog(null, "Enter Numerical Values for the Quantity","Error",JOptionPane.ERROR_MESSAGE);
            qty.setEditable(true);
        }
    }//GEN-LAST:event_qtyKeyPressed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeActionPerformed

    private void medicineTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicineTableMouseClicked
        //Get the index of the selected row
        int selectedRow = medicineTable.getSelectedRow();
        
        //Establish the table model that represents the structure & data of the table
        TableModel model = medicineTable.getModel(); 
        
        //Validations to ensure that User interacts with the selected row data
        //Set the First Name,Last Name,Date Of Birth,Gender,Email,Job Position,Joined Date,Salary & Contact Number text fields to the value from the selected row
        medName.setText(model.getValueAt(selectedRow, 1).toString()); 
        
         // Set selected job role in the combo box
        String selectedType = model.getValueAt(selectedRow, 2).toString();
        DefaultComboBoxModel<String> comboBoxModel = (DefaultComboBoxModel<String>) type.getModel();
        
        if (comboBoxModel != null) 
        {
            type.setSelectedItem(selectedType);
        }
        
        med_dosage.setText(model.getValueAt(selectedRow, 3).toString());
        qty.setText(model.getValueAt(selectedRow, 7).toString());
        unitPrice.setText(model.getValueAt(selectedRow, 4).toString());
        storageLocation.setText(model.getValueAt(selectedRow, 5).toString());
        //Set the Date Format for JoinedDate
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date_Added = (String) model.getValueAt(selectedRow, 6);
        
        
        
        
        //Retrieve the Employee ID from the First Column(index 0)of the selected row & store it
        med_id.setText(model.getValueAt(selectedRow, 0).toString());
        
        try 
        {
          //Handle the parsing of the Joined Date
          Date d_Added = simpleDateFormat.parse(date_Added); 
          date_added.setDate(d_Added);
          
          
        } 
        catch (ParseException e) 
        {
            // Handle the parsing exception 
            e.printStackTrace();
        }                            
    }//GEN-LAST:event_medicineTableMouseClicked

    private void medicineSearchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_medicineSearchBarKeyPressed
    // Get the text from the search bar
    String searchText = medicineSearchBar.getText().trim();

    // Get the table model of your medicine table
    DefaultTableModel model = (DefaultTableModel) medicineTable.getModel();

    // Create a row sorter for the table model
    TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>(model);
    
    // Set the row sorter to the table
    medicineTable.setRowSorter(rowSorter);

    // Apply the filter to show rows that contain the search text
    if (searchText.length() == 0) {
        // If the search text is empty, show all rows
        rowSorter.setRowFilter(null);
    } else {
        // Otherwise, show rows that contain the search text
        rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText)); // Case insensitive filter
    }
    }//GEN-LAST:event_medicineSearchBarKeyPressed

    private void Re_OrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Re_OrderActionPerformed
        // Back Button -> navigates to the ReOrdering
        this.dispose();
        ReOrdering obj = new ReOrdering();
        obj.show();
        
        //ReOrdering
    }//GEN-LAST:event_Re_OrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedicineInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedicineInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedicineInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedicineInventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MedicineInventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton BackBtn;
    private javax.swing.JButton Demo;
    private javax.swing.JButton InventoryReport;
    private javax.swing.JButton Re_Order;
    private javax.swing.JButton clearBtn;
    private com.toedter.calendar.JDateChooser date_added;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logOutBtn;
    private javax.swing.JLabel medID;
    private javax.swing.JLabel medID1;
    private javax.swing.JLabel medID10;
    private javax.swing.JLabel medID4;
    private javax.swing.JLabel medID6;
    private javax.swing.JLabel medID7;
    private javax.swing.JLabel medID8;
    private javax.swing.JLabel medID9;
    private javax.swing.JTextField medName;
    private javax.swing.JTextField med_dosage;
    private javax.swing.JTextField med_id;
    private javax.swing.JTextField medicineSearchBar;
    private javax.swing.JTable medicineTable;
    private javax.swing.JTextField qty;
    private javax.swing.JButton stockPage;
    private javax.swing.JTextField storageLocation;
    private javax.swing.JComboBox<String> type;
    private javax.swing.JTextField unitPrice;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton updateBtn1;
    // End of variables declaration//GEN-END:variables
}
