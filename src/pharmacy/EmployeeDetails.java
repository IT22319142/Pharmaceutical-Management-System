package pharmacy;
//@author thath

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

 
public class EmployeeDetails extends javax.swing.JFrame {
// Creates new form EmployeeDetails
    
    public EmployeeDetails() 
    {
        initComponents();
        refreshEmployeeTable();
        
        id.setText("Will Be Added Automatically");
        fname.setText("");
        lname.setText("");
        
        // Restricting the dob JDateChooser to only allow past dates
        dob.setDate(null); // Clear any default date set
        
        // Set maximum selectable date to yesterday's date
        Calendar cal = Calendar.getInstance();
        // Subtracting 1 day from today's date
        cal.add(Calendar.DAY_OF_MONTH, -1); 
        Date yesterday = cal.getTime();
        
        dob.setMaxSelectableDate(yesterday);
        
        // Create a ButtonGroup
        ButtonGroup attendanceGroup = new ButtonGroup();
        attendanceGroup.add(maleRadioButton);
        attendanceGroup.add(femaleRadioButton);
        
        // Set Male as the default selection
        maleRadioButton.setSelected(true); 
        femaleRadioButton.setSelected(false);
        
        nic.setText("");
        email.setText("@gmail.com");
        
        //The method to populate the Job Role combo box
        getJobRole();
        
        // Set startDate JDateChooser to today's date only
        startDate.setDate(new Date()); // Set the date to today's date
        startDate.setMinSelectableDate(new Date()); // Disabling past dates
        startDate.setMaxSelectableDate(new Date()); // Disabling future dates
        
        dailyRate.setText("0");
        phoneNo.setText("");
        
        // Action listener to Demo button
        attachDemoButtonListener();
    }

    private void attachDemoButtonListener() 
    {
        demo_Button.addActionListener(new ActionListener() 
        {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                fillDemoValues();
            }
        });
    }
    
    private void fillDemoValues()
    {
        // Sample values
        String[] sampleValues = 
        {
            "John", "Doe", "1980-01-01", "Male", "198056789012", "john@gmail.com",
            "Assistant Pharmacist", "3500", "0784567890"
        };

        // Filling fields with sample values
        fname.setText(sampleValues[0]);
        lname.setText(sampleValues[1]);
        
        try 
        {
            dob.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(sampleValues[2]));
        } 
        catch (ParseException ex) 
        {
            ex.printStackTrace();
        }
        if (sampleValues[3].equals("Male")) 
        {
            maleRadioButton.setSelected(true);
            femaleRadioButton.setSelected(false);
        } 
        else 
        {
            maleRadioButton.setSelected(false);
            femaleRadioButton.setSelected(true);
        }
        nic.setText(sampleValues[4]);
        email.setText(sampleValues[5]);
        role.setSelectedItem(sampleValues[6]);
        dailyRate.setText(sampleValues[7]);
        phoneNo.setText(sampleValues[8]);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SalaryManagementPageBtn = new javax.swing.JButton();
        BackBtn1 = new javax.swing.JButton();
        AttendancePageBtn = new javax.swing.JButton();
        demo_Button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        fname = new javax.swing.JTextField();
        lname = new javax.swing.JTextField();
        dob = new com.toedter.calendar.JDateChooser();
        maleRadioButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        phoneNo = new javax.swing.JTextField();
        dailyRate = new javax.swing.JTextField();
        startDate = new com.toedter.calendar.JDateChooser();
        AddBtn = new javax.swing.JButton();
        UpdateBtn = new javax.swing.JButton();
        DeleteBtn = new javax.swing.JButton();
        ClearBtn = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        LogoutBtn = new javax.swing.JButton();
        ExitBtn = new javax.swing.JButton();
        searchTxt = new javax.swing.JTextField();
        SearchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        EmployeeDetailsTable = new javax.swing.JTable();
        id = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        role = new javax.swing.JComboBox<>();
        nic = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 153, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("MediCare Pharmaceuticals");

        jLabel2.setIcon(new javax.swing.ImageIcon("D:\\Pharmacy Management System\\Pharmacy\\Images\\staff2.png")); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon("D:\\Pharmacy Management System\\Pharmacy\\Images\\staff1.png")); // NOI18N

        SalaryManagementPageBtn.setBackground(new java.awt.Color(102, 204, 0));
        SalaryManagementPageBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SalaryManagementPageBtn.setText("Salary Management");
        SalaryManagementPageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalaryManagementPageBtnActionPerformed(evt);
            }
        });

        BackBtn1.setBackground(new java.awt.Color(102, 204, 0));
        BackBtn1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        BackBtn1.setText("Back");
        BackBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtn1ActionPerformed(evt);
            }
        });

        AttendancePageBtn.setBackground(new java.awt.Color(102, 204, 0));
        AttendancePageBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AttendancePageBtn.setText("Attendance Management");
        AttendancePageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttendancePageBtnActionPerformed(evt);
            }
        });

        demo_Button.setBackground(new java.awt.Color(102, 204, 0));
        demo_Button.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        demo_Button.setText("Demo");
        demo_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demo_ButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 102));
        jLabel4.setText("Employee Management");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("First Name:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setText("Email:");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setText("Date of Birth:");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Gender:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Last Name:");

        fname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fnameKeyPressed(evt);
            }
        });

        lname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lnameKeyPressed(evt);
            }
        });

        maleRadioButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        maleRadioButton.setText("Male");
        maleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleRadioButtonActionPerformed(evt);
            }
        });

        femaleRadioButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        femaleRadioButton.setText("Female");
        femaleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleRadioButtonActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Employee ID:");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setText("Job Role:");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setText("Date of Joining:");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setText("Daily Rate:");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setText("Contact No:");

        phoneNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneNoActionPerformed(evt);
            }
        });
        phoneNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                phoneNoKeyPressed(evt);
            }
        });

        dailyRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                dailyRateKeyPressed(evt);
            }
        });

        AddBtn.setBackground(new java.awt.Color(102, 204, 0));
        AddBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AddBtn.setText("Add");
        AddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddBtnActionPerformed(evt);
            }
        });

        UpdateBtn.setBackground(new java.awt.Color(102, 204, 0));
        UpdateBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        UpdateBtn.setText("Update");
        UpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateBtnActionPerformed(evt);
            }
        });

        DeleteBtn.setBackground(new java.awt.Color(102, 204, 0));
        DeleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        ClearBtn.setBackground(new java.awt.Color(102, 204, 0));
        ClearBtn.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        ClearBtn.setText("Clear");
        ClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearBtnActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jLabel18.setText("Employee List");

        LogoutBtn.setBackground(new java.awt.Color(102, 204, 0));
        LogoutBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        LogoutBtn.setText("Logout");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        ExitBtn.setBackground(new java.awt.Color(0, 153, 102));
        ExitBtn.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        ExitBtn.setText("x");
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        SearchBtn.setBackground(new java.awt.Color(102, 204, 0));
        SearchBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        EmployeeDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "First Name", "Last Name", "Date Of Birth", "Gender", "NIC", "Email", "Job Role", "Start Date", "Daily Rate", "Contact No"
            }
        ));
        EmployeeDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(EmployeeDetailsTable);

        id.setEditable(false);
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel19.setText("NIC:");

        role.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        role.setSelectedItem(role);

        nic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nicActionPerformed(evt);
            }
        });
        nic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LogoutBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ExitBtn)
                .addGap(70, 70, 70))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(387, 387, 387)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel13)
                            .addComponent(jLabel6)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(AddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(109, 109, 109)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dob, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UpdateBtn)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(maleRadioButton)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel17)
                                            .addComponent(femaleRadioButton))))
                                .addGap(16, 16, 16)))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(phoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(160, 160, 160)
                                        .addComponent(ClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel16)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel19))
                                        .addGap(57, 57, 57)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(startDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(dailyRate, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(role, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(nic, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(email, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addComponent(jLabel18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchBtn)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LogoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel19)
                    .addComponent(nic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10))
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addGap(64, 64, 64)
                        .addComponent(AddBtn)
                        .addGap(73, 73, 73)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchBtn))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel14)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(role, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(dob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel16)
                                            .addComponent(dailyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(maleRadioButton)
                                            .addComponent(femaleRadioButton))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel17)
                                            .addComponent(phoneNo))))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UpdateBtn)
                            .addComponent(DeleteBtn)
                            .addComponent(ClearBtn))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addGap(56, 56, 56)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(AttendancePageBtn)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(SalaryManagementPageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(demo_Button)
                            .addComponent(BackBtn1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BackBtn1)
                .addGap(18, 18, 18)
                .addComponent(demo_Button)
                .addGap(120, 120, 120)
                .addComponent(AttendancePageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SalaryManagementPageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1029, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1412, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Populate the Job Roles combo box
    private void getJobRole() 
    {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
      
        model.addElement("Assistant Pharmacist");
        model.addElement("Accountant");
        model.addElement("Quality Control Analyst");
        model.addElement("Sales and Marketing Representative");
        model.addElement("Human Resources Manager");
        model.addElement("Supply Chain Manager");
        
        role.setModel(model);
    }

    
    private void SalaryManagementPageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalaryManagementPageBtnActionPerformed
        // Salary Page Button
        EmployeeSalary obj = new EmployeeSalary();
        obj.show();
        
       // Close the Employee Management Page
       this.dispose();
    }//GEN-LAST:event_SalaryManagementPageBtnActionPerformed

    private void AddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddBtnActionPerformed
        //Add Button
        String FirstName,LastName,DateOfBirth,Gender,Email, N_I_C, JobPosition,JoinedDate;
        int contactNo, daily_Rate;
        
        FirstName = fname.getText().trim();
        LastName = lname.getText().trim();
        
        N_I_C = nic.getText();
        Email = email.getText();
        
        // Check if any mandatory field is empty or has default values
        if (FirstName.isEmpty() || LastName.isEmpty() || N_I_C.isEmpty() || !Email.endsWith("@gmail.com") || Email.equals("@gmail.com")) 
        {
            JOptionPane.showMessageDialog(null, "Please fill all the required input fields!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop processing if compulsory user input fields are empty
        }
        // Validating the date formatting
        Date selectedDate = dob.getDate();
        if (selectedDate == null) 
        {
            JOptionPane.showMessageDialog(null, "Please select a valid Date of Birth!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stops processing if Date of Birth is not selected
        }
        
        //Validating the date formatting
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        DateOfBirth = sdf.format(dob.getDate());
        
        //Take input for Male and Female radio buttons
        Gender = getSelectedGender();
        
        // Validating NIC length
        if (N_I_C.length() != 12) 
        {
            JOptionPane.showMessageDialog(null, "Please enter 12 numerical values for the NIC!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop processing,if NIC length is incorrect
        }
        
        // Check whether the NIC already exists in the database
        try 
        {
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
            ResultSet existingNIC = st.executeQuery("SELECT * FROM employee WHERE NIC = '" + N_I_C + "'");
            
            if (existingNIC.next()) 
            {
                JOptionPane.showMessageDialog(null, "Please check whether the NIC is correct! There is another registered employee with the same NIC you are trying to insert!",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return; // Stop processing further if the NIC already exists in employee table
            }
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error occurred while checking NIC: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop processing further if there is a database error
        }
        
        // Get Job Role from the combo box
        JobPosition = (String) role.getSelectedItem();
        
        //Validating the date formatting
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        JoinedDate = simpleDateFormat.format(startDate.getDate());
        
        // User input validation for daily rate and contact no
        try 
        {
            daily_Rate = Integer.parseInt(dailyRate.getText());
            contactNo = Integer.parseInt(phoneNo.getText());
        } 
        catch (NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(null, "You must enter a valid Input for Daily Rate & Contact Number...!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop processing further if it is an invalid input
        }
        // Check if daily rate is 0
        if (daily_Rate == 0) 
        {
            JOptionPane.showMessageDialog(null, "Please enter a valid Daily Rate!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop processing if daily rate is still 0
        }

        //Validations of Database Interaction
        try
        {
            Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
            
            //Fetch the next avaialable Employee ID from the Database
            ResultSet rs = st.executeQuery("SELECT MAX(emp_ID) FROM employee" );
            int nextEmployeeID = 1;
            
            if (rs.next())
            {
                nextEmployeeID =rs.getInt(1) + 1;
            }
            
            int count = st.executeUpdate("INSERT INTO `employee`(`emp_ID`, `f_name`, `l_name`, `dob`, `gender`, `NIC` , `email`, `role`, `start_date`, `dailyRate`, `phone_no`) "
                    + "VALUES ('" + nextEmployeeID + "','" + FirstName + "','" + LastName + "','" + DateOfBirth + "','" + Gender + "' , '" + N_I_C + "' , '" + Email + "','" + JobPosition + "','" + JoinedDate + "','" + daily_Rate + "','" + contactNo + "')");
            
            if (count > 0) 
            {
                JOptionPane.showMessageDialog(null, "New Employee's Details Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                
                //Refresh the table after adding the New Employee's Details
                refreshEmployeeTable();
            }  
        }
         //Validations of Error Handling
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "You must enter a valid Input for Daily Rate & Contact Number...!","Error",JOptionPane.ERROR_MESSAGE);        
        }
        catch(Exception e)
        {
             JOptionPane.showMessageDialog(null, "Something went wrong...!","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddBtnActionPerformed

    private String getSelectedGender() 
    {
        if (maleRadioButton.isSelected()) 
            return "Male";
         
        else if (femaleRadioButton.isSelected()) 
            return "Female";
         
        else 
            //When no option is selected
            return "Unknown"; 
    }
    
    private void UpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateBtnActionPerformed
        // Update Button
        try
        {
            String FirstName,LastName,DateOfBirth,Gender,Email,N_I_C,JobPosition,JoinedDate;
            int Daily_Rate,contactNo;
        
            FirstName = fname.getText();
            LastName  = lname.getText();
        
            //Validating the date formatting
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            DateOfBirth = sdf.format(dob.getDate());
        
            // Obtain input for Male and Female radio buttons
            Gender = getSelectedGender();
            
            N_I_C =nic.getText();
            Email = email.getText();
            
            // Get Job Role from the combo box
            JobPosition = (String) role.getSelectedItem();
        
            //Validating the date formatting
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            JoinedDate = simpleDateFormat.format(startDate.getDate());
        
            //User input validation
            Daily_Rate = Integer.parseInt(dailyRate.getText());
            contactNo = Integer.parseInt(phoneNo.getText());
            
        
            //Validations of Database Interaction
            try
            {
                Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
                int x = Integer.parseInt(id.getText());
                
                //Validations related to SQL
                String query = "UPDATE employee SET f_name = ?,l_name = ?, dob = ?, gender = ? , NIC = ? , email = ?, role = ? , start_date = ? , dailyRate = ? , phone_no = ?  WHERE emp_ID = ?";
                
                // Use PreparedStatement to avoid SQL injection
                java.sql.PreparedStatement prepSt = st.getConnection().prepareStatement(query);
                
                prepSt.setString(1, FirstName);
                prepSt.setString(2, LastName);
                prepSt.setDate(3, java.sql.Date.valueOf(DateOfBirth));
                prepSt.setString(4, Gender);
                prepSt.setString(5, N_I_C);
                prepSt.setString(6, Email);
                prepSt.setString(7, JobPosition);
                // Assuming JoinedDate is a LocalDate
                prepSt.setDate(8, java.sql.Date.valueOf(JoinedDate));
                prepSt.setInt(9, Daily_Rate);
                prepSt.setInt(10, contactNo);
                
                prepSt.setInt(11, x);
                
                int count = prepSt.executeUpdate();
                
                if (count > 0) 
                {
                    JOptionPane.showMessageDialog(null, "Selected Employee's Details Updated Successfully", "Success",JOptionPane.INFORMATION_MESSAGE);
                    
                    // Refresh the medicineTable after updating
                    refreshEmployeeTable();
                }
            }
            catch(Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error occurred while Updating the selected Employee's Details", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(null, "Invalid Input for Daily Rate...!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception e)
        {
            //Generic Exception for any kind of exception
        }
    }//GEN-LAST:event_UpdateBtnActionPerformed

    //Refresh the refreshEmployeeTable after updating/deleting the selected Employee's Details
    private void refreshEmployeeTable() 
    {
        try 
        {
            // Fetch updated data from the Database
            Statement st = DBconnection.createDBconnection().createStatement();
            ResultSet rs = st.executeQuery(" SELECT * FROM employee ");
           
            // Create a new DefaultTableModel with updated data
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Employee ID");
            model.addColumn("First Name");
            model.addColumn("Last Name");
            model.addColumn("Date Of Birth");
            model.addColumn("Gender");
            model.addColumn("NIC");
            model.addColumn("Email");
            model.addColumn("Job Role");
            model.addColumn("Start Date");
            model.addColumn("Daily Rate");
            model.addColumn("Contact No");

            while (rs.next()) 
            {
                Object[] row = 
                {
                    rs.getInt("emp_ID"),
                    rs.getString("f_name"),
                    rs.getString("l_name"),
                    rs.getString("dob"),
                    rs.getString("gender"),
                    rs.getString("NIC"),
                    rs.getString("email"),
                    rs.getString("role"),
                    rs.getString("start_date"),
                    rs.getInt("dailyRate"),
                    rs.getInt("phone_no"),
                };
                model.addRow(row);
            }

            // Set the updated model to the medicineTable
            EmployeeDetailsTable.setModel(model);
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(null, "Error occurred while refreshing Table: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        //Delete Button
        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to 'Delete' this Employee?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) 
        {
            try 
            {
                Statement st = pharmacy.DBconnection.createDBconnection().createStatement();
                String query = "DELETE FROM `employee` WHERE `emp_ID` = " + Integer.valueOf(EmployeeDetailsTable.getValueAt(EmployeeDetailsTable.getSelectedRow(), 0).toString());

                //executeUpdate Method call to execute the DELETE query & returns the No of rows deleted
                int count = st.executeUpdate(query);  
                //System.out.println(query);

                //Data Validations 
                if (count > 0) 
                {
                    JOptionPane.showMessageDialog(null, "Selected Employee's Details Deleted Successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

                    // Refresh the EmployeeDetailsTable after deleting
                    refreshEmployeeTable();
                }

                //Deselect previous selected rows
                EmployeeDetailsTable.clearSelection();  
                refreshEmployeeTable();
            }
            catch (SQLException ex) 
            {
                JOptionPane.showMessageDialog(null, "Error occurred while Deleting Tuple: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            catch (Exception e) 
            {

            }
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void ClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearBtnActionPerformed
      // Clear Button
        id.setText("Will Be Added Automatically");
        fname.setText("");
        lname.setText("");
        dob.setDate(Date.from(Instant.now()));
        maleRadioButton.setSelected(true);
        femaleRadioButton.setSelected(false);
        nic.setText("");
        email.setText("@gmail.com");
        role.setSelectedIndex(-1);
        startDate.setDate(Date.from(Instant.now()));
        dailyRate.setText("0");
        phoneNo.setText("");
    }//GEN-LAST:event_ClearBtnActionPerformed

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        //Logout Button
        this.dispose();
        Loginform obj = new Loginform();
        obj.show();
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        //Exit Button
        System.exit(0);
    }//GEN-LAST:event_ExitBtnActionPerformed

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        String searchText = searchTxt.getText().trim();
        
        // Check if the search text is not empty
        if (!searchText.isEmpty())
        {
            try 
            {
                Statement st = DBconnection.createDBconnection().createStatement();
                ResultSet rs = st.executeQuery("SELECT * FROM employee WHERE (emp_ID LIKE '%" + searchText + "%') || (f_name LIKE '%" + searchText + "%') || (gender LIKE '%" + searchText + "%')|| "
                        + "(NIC LIKE '%" + searchText + "%')");

                // Create a table model to hold the search results
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("Employee ID");
                model.addColumn("First Name");
                model.addColumn("Last Name");
                model.addColumn("Date Of Birth");
                model.addColumn("Gender");
                model.addColumn("NIC");
                model.addColumn("Email"); 
                model.addColumn("Job Role");
                model.addColumn("Start Date");
                model.addColumn("Daily Rate");
                model.addColumn("Contact No");
                
                 // Add the search results to the table model
                while (rs.next()) 
                {
                    Object[] row = 
                    {
                        rs.getInt("emp_ID"),
                        rs.getString("f_name"),
                        rs.getString("l_name"),
                        rs.getString("dob"),
                        rs.getString("email"),
                        rs.getString("gender"),
                        rs.getString("NIC"),
                        rs.getString("email"),
                        rs.getString("role"),
                        rs.getString("start_date"),
                        rs.getInt("dailyRate"),
                        rs.getInt("phone_no")
                    };
                    model.addRow(row);
                }
                
                // Set the table model to the JTable
                EmployeeDetailsTable.setModel(model);
                
            } 
            catch (SQLException e) 
            {
                JOptionPane.showMessageDialog(null, "Error Occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        } 
        else 
        {
            // If search text is empty, refresh the table with all suppliers
            refreshEmployeeTable();
        }
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void maleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maleRadioButtonActionPerformed

    private void femaleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleRadioButtonActionPerformed

    private void EmployeeDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeDetailsTableMouseClicked
        //Get the index of the selected row
        int selectedRow = EmployeeDetailsTable.getSelectedRow();
        
        //Establish the table model that represents the structure & data of the table
        TableModel model = EmployeeDetailsTable.getModel(); 
        
        //Validations to ensure that User interacts with the selected row data
        //Set the First Name,Last Name,Date Of Birth,Gender,Email,Job Position,Joined Date,Salary & Contact Number text fields to the value from the selected row
        fname.setText(model.getValueAt(selectedRow, 1).toString()); 
        lname.setText(model.getValueAt(selectedRow, 2).toString());
        
        //Set the Date Format for DateOfBirth
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String DateOfBirth = (String) model.getValueAt(selectedRow, 3);
        
        nic.setText(model.getValueAt(selectedRow, 5).toString());
        email.setText(model.getValueAt(selectedRow, 6).toString());
        
        // Set selected job role in the combo box
        String selectedRole = model.getValueAt(selectedRow, 7).toString();
        DefaultComboBoxModel<String> comboBoxModel = (DefaultComboBoxModel<String>) role.getModel();
        
        if (comboBoxModel != null) 
        {
            role.setSelectedItem(selectedRole);
        }
        
        //Set the Date Format for JoinedDate
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String JoinedDate = (String) model.getValueAt(selectedRow, 8);
        
        dailyRate.setText(model.getValueAt(selectedRow, 9).toString());
        phoneNo.setText(model.getValueAt(selectedRow, 10).toString());
        
        //Retrieve the Employee ID from the First Column(index 0)of the selected row & store it
        id.setText(model.getValueAt(selectedRow, 0).toString());
        
        try 
        {
          //Handle the parsing of the Birth Date
          Date DateofBirth = sdf.parse(DateOfBirth); 
          dob.setDate(DateofBirth);
          
          //Handle the parsing of the Joined Date
          Date StartDate = simpleDateFormat.parse(JoinedDate); 
          startDate.setDate(StartDate);
          
          // Retrieves and sets the gender
          String gender = (String) model.getValueAt(selectedRow, 4);
          if ("Male".equals(gender)) 
          {
            maleRadioButton.setSelected(true);
            femaleRadioButton.setSelected(false);
          } 
          else if ("Female".equals(gender)) 
          {
            maleRadioButton.setSelected(false);
            femaleRadioButton.setSelected(true);
          } 
          else 
          {
            // If gender is neither Male nor Female
            maleRadioButton.setSelected(false);
            femaleRadioButton.setSelected(false);
          }
            // Disable radio buttons when user tries to update an existing data tuple
            maleRadioButton.setEnabled(false);
            femaleRadioButton.setEnabled(false);
        
            // Disable Date of Birth and Start Date fields when user tries to update an existing data tuple
            dob.setEnabled(false);
            startDate.setEnabled(false);
        } 
        catch (ParseException e) 
        {
            // Handle the parsing exception 
            e.printStackTrace();
        }
    }//GEN-LAST:event_EmployeeDetailsTableMouseClicked

    private void dailyRateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dailyRateKeyPressed
        //Ensures that the user enters only the numerical values for the Daily Rate
        char c = evt.getKeyChar();
        //Validating the user inputs for the Daily Rate
        if(Character.isLetter(c))
        {
            dailyRate.setEditable(false);
            JOptionPane.showMessageDialog(null, "Enter Numerical Values for the Daily Rate!","Error",JOptionPane.ERROR_MESSAGE);
            dailyRate.setEditable(true);
        }
    }//GEN-LAST:event_dailyRateKeyPressed

    private void BackBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtn1ActionPerformed
        // Back Button -> navigates to the Dashboard
        this.dispose();
        Dashboard obj = new Dashboard();
        obj.show();
    }//GEN-LAST:event_BackBtn1ActionPerformed

    private void AttendancePageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AttendancePageBtnActionPerformed
        // Attendance Page Button
        EmployeeAttendance obj = new EmployeeAttendance();
       obj.show();
       // Close the Employee Management Page
       this.dispose();
    }//GEN-LAST:event_AttendancePageBtnActionPerformed

    private void demo_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demo_ButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_demo_ButtonActionPerformed

    private void phoneNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneNoKeyPressed
        // Ensures that the user enters only numerical values for the contact number
        char c = evt.getKeyChar();

        // Validating the user inputs for the contact number
        if (!Character.isDigit(c) || phoneNo.getText().length() >= 10)
        {
            evt.consume();
            // Consume the event to prevent the input
            JOptionPane.showMessageDialog(null, "Enter up to 10 numerical values for the contact number", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_phoneNoKeyPressed

    private void nicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nicActionPerformed

    private void phoneNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneNoActionPerformed

    private void fnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fnameKeyPressed
        // Ensures that the user enters only alphabetic values for the first name
        char c = evt.getKeyChar();

        // Validating the user inputs for the contact person
        if (!Character.isLetter(c)) 
        {
            evt.consume(); // Consume the event to prevent the input

            // Display error message
            JOptionPane.showMessageDialog(null, "Please Enter Only Alphabetic Characters for the First Name", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fnameKeyPressed

    private void lnameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lnameKeyPressed
        // Ensures that the user enters only alphabetic values for the last name
        char c = evt.getKeyChar();

        // Validating the user inputs for the contact person
        if (!Character.isLetter(c)) 
        {
            evt.consume(); // Consume the event to prevent the input

            // Display error message
            JOptionPane.showMessageDialog(null, "Please Enter Only Alphabetic Characters for the Last Name!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_lnameKeyPressed

    private void nicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicKeyPressed
        //Ensures that the user enters only the numerical values for NIC
        char c = evt.getKeyChar();
        
        //Validating the user inputs for the NIC
        if(Character.isLetter(c))
        {
            nic.setEditable(false);
            JOptionPane.showMessageDialog(null, "Enter Numerical Values for the NIC","Error",JOptionPane.ERROR_MESSAGE);
            nic.setEditable(true);
        }
    }//GEN-LAST:event_nicKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddBtn;
    private javax.swing.JButton AttendancePageBtn;
    private javax.swing.JButton BackBtn1;
    private javax.swing.JButton ClearBtn;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JTable EmployeeDetailsTable;
    private javax.swing.JButton ExitBtn;
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JButton SalaryManagementPageBtn;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JButton UpdateBtn;
    private javax.swing.JTextField dailyRate;
    private javax.swing.JButton demo_Button;
    private com.toedter.calendar.JDateChooser dob;
    private javax.swing.JTextField email;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JTextField fname;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lname;
    private javax.swing.JRadioButton maleRadioButton;
    private javax.swing.JTextField nic;
    private javax.swing.JTextField phoneNo;
    private javax.swing.JComboBox<String> role;
    private javax.swing.JTextField searchTxt;
    private com.toedter.calendar.JDateChooser startDate;
    // End of variables declaration//GEN-END:variables
}
